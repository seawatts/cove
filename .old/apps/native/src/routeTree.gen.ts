/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardsImport } from './routes/dashboards'
import { Route as IndexImport } from './routes/index'
import { Route as DevicesIndexImport } from './routes/devices/index'
import { Route as DevicesDeviceIdImport } from './routes/devices/$deviceId'
import { Route as DashboardsDashboardIdImport } from './routes/dashboards/$dashboardId'

// Create/Update Routes

const DashboardsRoute = DashboardsImport.update({
  id: '/dashboards',
  path: '/dashboards',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DevicesIndexRoute = DevicesIndexImport.update({
  id: '/devices/',
  path: '/devices/',
  getParentRoute: () => rootRoute,
} as any)

const DevicesDeviceIdRoute = DevicesDeviceIdImport.update({
  id: '/devices/$deviceId',
  path: '/devices/$deviceId',
  getParentRoute: () => rootRoute,
} as any)

const DashboardsDashboardIdRoute = DashboardsDashboardIdImport.update({
  id: '/$dashboardId',
  path: '/$dashboardId',
  getParentRoute: () => DashboardsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboards': {
      id: '/dashboards'
      path: '/dashboards'
      fullPath: '/dashboards'
      preLoaderRoute: typeof DashboardsImport
      parentRoute: typeof rootRoute
    }
    '/dashboards/$dashboardId': {
      id: '/dashboards/$dashboardId'
      path: '/$dashboardId'
      fullPath: '/dashboards/$dashboardId'
      preLoaderRoute: typeof DashboardsDashboardIdImport
      parentRoute: typeof DashboardsImport
    }
    '/devices/$deviceId': {
      id: '/devices/$deviceId'
      path: '/devices/$deviceId'
      fullPath: '/devices/$deviceId'
      preLoaderRoute: typeof DevicesDeviceIdImport
      parentRoute: typeof rootRoute
    }
    '/devices/': {
      id: '/devices/'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof DevicesIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface DashboardsRouteChildren {
  DashboardsDashboardIdRoute: typeof DashboardsDashboardIdRoute
}

const DashboardsRouteChildren: DashboardsRouteChildren = {
  DashboardsDashboardIdRoute: DashboardsDashboardIdRoute,
}

const DashboardsRouteWithChildren = DashboardsRoute._addFileChildren(
  DashboardsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboards': typeof DashboardsRouteWithChildren
  '/dashboards/$dashboardId': typeof DashboardsDashboardIdRoute
  '/devices/$deviceId': typeof DevicesDeviceIdRoute
  '/devices': typeof DevicesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboards': typeof DashboardsRouteWithChildren
  '/dashboards/$dashboardId': typeof DashboardsDashboardIdRoute
  '/devices/$deviceId': typeof DevicesDeviceIdRoute
  '/devices': typeof DevicesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboards': typeof DashboardsRouteWithChildren
  '/dashboards/$dashboardId': typeof DashboardsDashboardIdRoute
  '/devices/$deviceId': typeof DevicesDeviceIdRoute
  '/devices/': typeof DevicesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboards'
    | '/dashboards/$dashboardId'
    | '/devices/$deviceId'
    | '/devices'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboards'
    | '/dashboards/$dashboardId'
    | '/devices/$deviceId'
    | '/devices'
  id:
    | '__root__'
    | '/'
    | '/dashboards'
    | '/dashboards/$dashboardId'
    | '/devices/$deviceId'
    | '/devices/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardsRoute: typeof DashboardsRouteWithChildren
  DevicesDeviceIdRoute: typeof DevicesDeviceIdRoute
  DevicesIndexRoute: typeof DevicesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardsRoute: DashboardsRouteWithChildren,
  DevicesDeviceIdRoute: DevicesDeviceIdRoute,
  DevicesIndexRoute: DevicesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboards",
        "/devices/$deviceId",
        "/devices/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboards": {
      "filePath": "dashboards.tsx",
      "children": [
        "/dashboards/$dashboardId"
      ]
    },
    "/dashboards/$dashboardId": {
      "filePath": "dashboards/$dashboardId.tsx",
      "parent": "/dashboards"
    },
    "/devices/$deviceId": {
      "filePath": "devices/$deviceId.tsx"
    },
    "/devices/": {
      "filePath": "devices/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
