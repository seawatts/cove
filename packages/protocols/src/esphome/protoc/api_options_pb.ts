// @generated by protoc-gen-es v2.9.0 with parameter "target=ts,import_extension=none"
// @generated from file api_options.proto (syntax proto2)
/* eslint-disable */

import type { Message } from '@bufbuild/protobuf';
import type {
  GenEnum,
  GenExtension,
  GenFile,
  GenMessage,
} from '@bufbuild/protobuf/codegenv2';
import {
  enumDesc,
  extDesc,
  fileDesc,
  messageDesc,
} from '@bufbuild/protobuf/codegenv2';
import type {
  FieldOptions,
  MessageOptions,
  MethodOptions,
} from '@bufbuild/protobuf/wkt';
import { file_google_protobuf_descriptor } from '@bufbuild/protobuf/wkt';

/**
 * Describes the file api_options.proto.
 */
export const file_api_options: GenFile =
  /*@__PURE__*/
  fileDesc(
    'ChFhcGlfb3B0aW9ucy5wcm90byIGCgR2b2lkKkYKDUFQSVNvdXJjZVR5cGUSDwoLU09VUkNFX0JPVEgQABIRCg1TT1VSQ0VfU0VSVkVSEAESEQoNU09VUkNFX0NMSUVOVBACOlsKFm5lZWRzX3NldHVwX2Nvbm5lY3Rpb24SHi5nb29nbGUucHJvdG9idWYuTWV0aG9kT3B0aW9ucxiOCCABKAg6BHRydWVSFG5lZWRzU2V0dXBDb25uZWN0aW9uOlgKFG5lZWRzX2F1dGhlbnRpY2F0aW9uEh4uZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMYjwggASgIOgR0cnVlUhNuZWVkc0F1dGhlbnRpY2F0aW9uOjMKAmlkEh8uZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zGIwIIAEoDToBMFICaWQ6VQoGc291cmNlEh8uZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zGI0IIAEoDjIOLkFQSVNvdXJjZVR5cGU6C1NPVVJDRV9CT1RIUgZzb3VyY2U6NgoFaWZkZWYSHy5nb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnMYjgggASgJUgVpZmRlZjo4CgNsb2cSHy5nb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnMYjwggASgIOgR0cnVlUgNsb2c6QgoIbm9fZGVsYXkSHy5nb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnMYkAggASgIOgVmYWxzZVIHbm9EZWxheTo/CgpiYXNlX2NsYXNzEh8uZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zGJEIIAEoCVIJYmFzZUNsYXNzOj8KC2ZpZWxkX2lmZGVmEh0uZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucxiSCCABKAlSCmZpZWxkSWZkZWY6SQoQZml4ZWRfYXJyYXlfc2l6ZRIdLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMY14YDIAEoDVIOZml4ZWRBcnJheVNpemU6SAoMbm9femVyb19jb3B5Eh0uZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucxjYhgMgASgIOgVmYWxzZVIKbm9aZXJvQ29weTpZChVmaXhlZF9hcnJheV9za2lwX3plcm8SHS5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zGNmGAyABKAg6BWZhbHNlUhJmaXhlZEFycmF5U2tpcFplcm86VgoXZml4ZWRfYXJyYXlfc2l6ZV9kZWZpbmUSHS5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zGNqGAyABKAlSFGZpeGVkQXJyYXlTaXplRGVmaW5lOmMKHmZpeGVkX2FycmF5X3dpdGhfbGVuZ3RoX2RlZmluZRIdLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMY24YDIAEoCVIaZml4ZWRBcnJheVdpdGhMZW5ndGhEZWZpbmU6UgoRcG9pbnRlcl90b19idWZmZXISHS5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zGNyGAyABKAg6BWZhbHNlUg9wb2ludGVyVG9CdWZmZXI6TAoRY29udGFpbmVyX3BvaW50ZXISHS5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zGNGGAyABKAlSEGNvbnRhaW5lclBvaW50ZXI6SQoMZml4ZWRfdmVjdG9yEh0uZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucxjdhgMgASgIOgVmYWxzZVILZml4ZWRWZWN0b3I',
    [file_google_protobuf_descriptor],
  );

/**
 * @generated from message void
 */
export type void$ = Message<'void'> & {};

/**
 * Describes the message void.
 * Use `create(voidSchema)` to create a new message.
 */
export const voidSchema: GenMessage<void$> =
  /*@__PURE__*/
  messageDesc(file_api_options, 0);

/**
 * @generated from enum APISourceType
 */
export enum APISourceType {
  /**
   * @generated from enum value: SOURCE_BOTH = 0;
   */
  SOURCE_BOTH = 0,

  /**
   * @generated from enum value: SOURCE_SERVER = 1;
   */
  SOURCE_SERVER = 1,

  /**
   * @generated from enum value: SOURCE_CLIENT = 2;
   */
  SOURCE_CLIENT = 2,
}

/**
 * Describes the enum APISourceType.
 */
export const APISourceTypeSchema: GenEnum<APISourceType> =
  /*@__PURE__*/
  enumDesc(file_api_options, 0);

/**
 * @generated from extension: optional bool needs_setup_connection = 1038 [default = true];
 */
export const needs_setup_connection: GenExtension<MethodOptions, boolean> =
  /*@__PURE__*/
  extDesc(file_api_options, 0);

/**
 * @generated from extension: optional bool needs_authentication = 1039 [default = true];
 */
export const needs_authentication: GenExtension<MethodOptions, boolean> =
  /*@__PURE__*/
  extDesc(file_api_options, 1);

/**
 * @generated from extension: optional uint32 id = 1036 [default = 0];
 */
export const id: GenExtension<MessageOptions, number> =
  /*@__PURE__*/
  extDesc(file_api_options, 2);

/**
 * @generated from extension: optional APISourceType source = 1037 [default = SOURCE_BOTH];
 */
export const source: GenExtension<MessageOptions, APISourceType> =
  /*@__PURE__*/
  extDesc(file_api_options, 3);

/**
 * @generated from extension: optional string ifdef = 1038;
 */
export const ifdef: GenExtension<MessageOptions, string> =
  /*@__PURE__*/
  extDesc(file_api_options, 4);

/**
 * @generated from extension: optional bool log = 1039 [default = true];
 */
export const log: GenExtension<MessageOptions, boolean> =
  /*@__PURE__*/
  extDesc(file_api_options, 5);

/**
 * @generated from extension: optional bool no_delay = 1040 [default = false];
 */
export const no_delay: GenExtension<MessageOptions, boolean> =
  /*@__PURE__*/
  extDesc(file_api_options, 6);

/**
 * @generated from extension: optional string base_class = 1041;
 */
export const base_class: GenExtension<MessageOptions, string> =
  /*@__PURE__*/
  extDesc(file_api_options, 7);

/**
 * @generated from extension: optional string field_ifdef = 1042;
 */
export const field_ifdef: GenExtension<FieldOptions, string> =
  /*@__PURE__*/
  extDesc(file_api_options, 8);

/**
 * @generated from extension: optional uint32 fixed_array_size = 50007;
 */
export const fixed_array_size: GenExtension<FieldOptions, number> =
  /*@__PURE__*/
  extDesc(file_api_options, 9);

/**
 * @generated from extension: optional bool no_zero_copy = 50008 [default = false];
 */
export const no_zero_copy: GenExtension<FieldOptions, boolean> =
  /*@__PURE__*/
  extDesc(file_api_options, 10);

/**
 * @generated from extension: optional bool fixed_array_skip_zero = 50009 [default = false];
 */
export const fixed_array_skip_zero: GenExtension<FieldOptions, boolean> =
  /*@__PURE__*/
  extDesc(file_api_options, 11);

/**
 * @generated from extension: optional string fixed_array_size_define = 50010;
 */
export const fixed_array_size_define: GenExtension<FieldOptions, string> =
  /*@__PURE__*/
  extDesc(file_api_options, 12);

/**
 * @generated from extension: optional string fixed_array_with_length_define = 50011;
 */
export const fixed_array_with_length_define: GenExtension<
  FieldOptions,
  string
> = /*@__PURE__*/ extDesc(file_api_options, 13);

/**
 * pointer_to_buffer: Use pointer instead of array for fixed-size byte fields
 * When set, the field will be declared as a pointer (const uint8_t *data)
 * instead of an array (uint8_t data[N]). This allows zero-copy on decode
 * by pointing directly to the protobuf buffer. The buffer must remain valid
 * until the message is processed (which is guaranteed for stack-allocated messages).
 *
 * @generated from extension: optional bool pointer_to_buffer = 50012 [default = false];
 */
export const pointer_to_buffer: GenExtension<FieldOptions, boolean> =
  /*@__PURE__*/
  extDesc(file_api_options, 14);

/**
 * container_pointer: Zero-copy optimization for repeated fields.
 *
 * When container_pointer is set on a repeated field, the generated message will
 * store a pointer to an existing container instead of copying the data into the
 * message's own repeated field. This eliminates heap allocations and improves performance.
 *
 * Requirements for safe usage:
 * 1. The source container must remain valid until the message is encoded
 * 2. Messages must be encoded immediately (which ESPHome does by default)
 * 3. The container type must match the field type exactly
 *
 * Supported container types:
 * - "std::vector<T>" for most repeated fields
 * - "std::set<T>" for unique/sorted data
 * - Full type specification required for enums (e.g., "std::set<climate::ClimateMode>")
 *
 * Example usage in .proto file:
 *   repeated string supported_modes = 12 [(container_pointer) = "std::set"];
 *   repeated ColorMode color_modes = 13 [(container_pointer) = "std::set<light::ColorMode>"];
 *
 * The corresponding C++ code must provide const reference access to a container
 * that matches the specified type and remains valid during message encoding.
 * This is typically done through methods returning const T& or special accessor
 * methods like get_options() or supported_modes_for_api_().
 *
 * @generated from extension: optional string container_pointer = 50001;
 */
export const container_pointer: GenExtension<FieldOptions, string> =
  /*@__PURE__*/
  extDesc(file_api_options, 15);

/**
 * fixed_vector: Use FixedVector instead of std::vector for repeated fields
 * When set, the repeated field will use FixedVector<T> which requires calling
 * init(size) before adding elements. This eliminates std::vector template overhead
 * and is ideal when the exact size is known before populating the array.
 *
 * @generated from extension: optional bool fixed_vector = 50013 [default = false];
 */
export const fixed_vector: GenExtension<FieldOptions, boolean> =
  /*@__PURE__*/
  extDesc(file_api_options, 16);
