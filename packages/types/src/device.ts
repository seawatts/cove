/**
 * Device types and capabilities for Cove home automation platform
 * Ported from .old/crates/db/src/models/device.rs and .old/crates/types/src/devices.rs
 */

export enum DeviceType {
  Light = 'light',
  Switch = 'switch',
  Sensor = 'sensor',
  Thermostat = 'thermostat',
  Lock = 'lock',
  Camera = 'camera',
  Speaker = 'speaker',
  Fan = 'fan',
  Outlet = 'outlet',
  CoveHub = 'cove_hub', // Our Cove Hub (the daemon)
  Hub = 'hub', // Other hubs (Hue Bridge, SmartThings, etc.)
  Other = 'other',
}

export enum DeviceCapability {
  // Power & Switching
  OnOff = 'on_off',

  // Lighting
  Brightness = 'brightness',
  ColorTemperature = 'color_temperature',
  ColorRgb = 'color_rgb',

  // Environmental Sensors
  Temperature = 'temperature',
  Humidity = 'humidity',
  AirQuality = 'air_quality',
  Co2 = 'co2',
  Pressure = 'pressure',

  // Motion & Occupancy
  Motion = 'motion',
  Occupancy = 'occupancy',
  ContactSensor = 'contact_sensor',

  // Power Management
  Battery = 'battery',
  PowerConsumption = 'power_consumption',
  Voltage = 'voltage',

  // Security
  Lock = 'lock',
  Unlock = 'unlock',

  // Media
  AudioVolume = 'audio_volume',
  AudioPlayback = 'audio_playback',
  VideoStream = 'video_stream',

  // Climate Control
  FanSpeed = 'fan_speed',
  Heating = 'heating',
  Cooling = 'cooling',
  TargetTemperature = 'target_temperature',

  // Custom
  Custom = 'custom',
}

export enum ProtocolType {
  ESPHome = 'esphome',
  Hue = 'hue',
  Matter = 'matter',
  Sonos = 'sonos',
  Zigbee = 'zigbee',
  ZWave = 'zwave',
  WiFi = 'wifi',
  Bluetooth = 'bluetooth',
  MQTT = 'mqtt',
  HTTP = 'http',
}

export interface DeviceState {
  [key: string]: unknown;
  // Common state properties
  online?: boolean;
  available?: boolean;
  // Power
  on?: boolean;
  // Lighting
  brightness?: number; // 0-100
  color_temp?: number; // Kelvin
  rgb?: [number, number, number]; // RGB values
  // Sensors
  temperature?: number; // Celsius
  humidity?: number; // Percentage
  co2?: number; // PPM
  battery?: number; // Percentage
  // Media
  volume?: number; // 0-100
  // Climate
  target_temperature?: number; // Celsius
  fan_speed?: number; // 0-100
}

export interface DeviceConfig {
  [key: string]: unknown;
  // Protocol-specific configuration
  ip_address?: string;
  mac_address?: string;
  api_key?: string;
  update_interval?: number; // Seconds
  // Display settings
  icon?: string;
  color?: string;
}

export interface Device {
  id?: string; // Optional - generated by database for new devices
  name: string;
  deviceType: DeviceType;
  roomId?: string;
  hubId?: string;

  // External unique identifier for deduplication (protocol-specific)
  // Examples: "hue_bridge123_light_4", "esphome_abc123", "matter_xyz789"
  externalId: string;

  capabilities: DeviceCapability[];
  protocol?: ProtocolType;

  ipAddress?: string;
  macAddress?: string;
  host?: string; // Local hostname (e.g., "Sonos-7828CA22AF1C.local")

  // Device identification (extracted from protocol-specific data)
  manufacturer?: string; // e.g., "Philips", "Sonos", "Espressif"
  model?: string; // e.g., "Hue White A19", "One SL", "ESP32"

  state: DeviceState;
  config: DeviceConfig;

  online: boolean;
  available: boolean;

  createdAt: Date;
  updatedAt: Date;
  lastSeen?: Date;

  // Ownership (optional for discovered devices)
  userId?: string;
  orgId?: string;

  // Hub-specific field (only used when deviceType='hub')
  version?: string;
}

// State - time-series state changes
// Follows Home Assistant pattern where state changes are the history
// State can be a single value (delta storage) or full state object
export interface State {
  id: string;
  deviceId: string;
  state: unknown; // Can be primitive (delta) or Record (full state)
  attributes: Record<string, unknown>;
  lastChanged: Date;
  lastUpdated: Date;
}

// Legacy export for backwards compatibility
export type DeviceStateHistory = State;

// Legacy - will be removed after migration
export interface DeviceMetric {
  id: string;
  deviceId: string;
  metricType: string;
  value: number;
  unit?: string;
  timestamp: Date;
}

export interface Command {
  deviceId: string;
  capability: DeviceCapability;
  value: unknown;
  timestamp?: Date;
}

// Legacy export for backwards compatibility
export type DeviceCommand = Command;

export interface DeviceDiscovery {
  protocol: ProtocolType;
  name: string;
  deviceType?: DeviceType;
  ipAddress?: string;
  macAddress?: string;
  metadata: Record<string, unknown>;
  discovered_at: Date;
}

// Event severity levels
export enum EventSeverity {
  Info = 'info',
  Warning = 'warning',
  Error = 'error',
  Critical = 'critical',
}

// Event types for all devices (including hubs)
// Expanded to include both system diagnostics AND device activity
export enum EventType {
  // Lifecycle events
  HubStarted = 'hub_started',
  HubStopped = 'hub_stopped',

  // Device events
  DeviceDiscovered = 'device_discovered',
  DeviceLost = 'device_lost',
  DeviceConnected = 'device_connected',
  DeviceDisconnected = 'device_disconnected',

  // Adapter events
  AdapterInitialized = 'adapter_initialized',
  AdapterError = 'adapter_error',
  AdapterShutdown = 'adapter_shutdown',

  // Command events
  CommandProcessed = 'command_processed',
  CommandFailed = 'command_failed',

  // Sync events
  SyncSuccess = 'sync_success',
  SyncError = 'sync_error',

  // System events
  SystemError = 'system_error',
  ConfigUpdated = 'config_updated',

  // Device activity events (user-facing)
  StateChanged = 'state_changed',
  LockAccessed = 'lock_accessed',
  LockUnlocked = 'lock_unlocked',
  LockLocked = 'lock_locked',
  MotionDetected = 'motion_detected',
  MotionCleared = 'motion_cleared',
  CameraStreamStarted = 'camera_stream_started',
  CameraStreamStopped = 'camera_stream_stopped',
  CameraMotionDetected = 'camera_motion_detected',
  SensorThresholdExceeded = 'sensor_threshold_exceeded',
  SensorThresholdNormal = 'sensor_threshold_normal',
  DeviceTampered = 'device_tampered',
  BatteryLow = 'battery_low',
  BatteryCritical = 'battery_critical',
}

// Event for activity feed
// Captures both system diagnostics AND user-facing device activity
export interface Event {
  id: string;
  deviceId: string;
  eventType: EventType;
  severity: EventSeverity;
  message: string;
  metadata?: Record<string, unknown>;
  timestamp: Date;
  stateId?: string; // Optional link to state entry
}

// Legacy export for backwards compatibility
export type DeviceEvent = Event;
