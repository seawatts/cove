// !!!GENERATED FILE, DO NOT EDIT!!!
// This file is auto-generated by supabase in scripts/generate-types.ts
// Schema: public
// Generated at: 2025-10-16T06:12:27.747Z

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      automation: {
        Row: {
          createdAt: string
          createdBy: string | null
          enabled: boolean
          homeId: string
          id: string
          name: string
          updatedAt: string
        }
        Insert: {
          createdAt?: string
          createdBy?: string | null
          enabled?: boolean
          homeId: string
          id: string
          name: string
          updatedAt?: string
        }
        Update: {
          createdAt?: string
          createdBy?: string | null
          enabled?: boolean
          homeId?: string
          id?: string
          name?: string
          updatedAt?: string
        }
        Relationships: [
          {
            foreignKeyName: "automation_createdBy_users_id_fk"
            columns: ["createdBy"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "automation_homeId_home_id_fk"
            columns: ["homeId"]
            isOneToOne: false
            referencedRelation: "home"
            referencedColumns: ["id"]
          },
        ]
      }
      automationTrace: {
        Row: {
          automationId: string
          finishedAt: string | null
          homeId: string
          runId: string
          spans: Json | null
          startedAt: string
          status: string
          traceId: string
          version: number
        }
        Insert: {
          automationId: string
          finishedAt?: string | null
          homeId: string
          runId: string
          spans?: Json | null
          startedAt?: string
          status?: string
          traceId: string
          version: number
        }
        Update: {
          automationId?: string
          finishedAt?: string | null
          homeId?: string
          runId?: string
          spans?: Json | null
          startedAt?: string
          status?: string
          traceId?: string
          version?: number
        }
        Relationships: [
          {
            foreignKeyName: "automationTrace_automationId_automation_id_fk"
            columns: ["automationId"]
            isOneToOne: false
            referencedRelation: "automation"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "automationTrace_homeId_home_id_fk"
            columns: ["homeId"]
            isOneToOne: false
            referencedRelation: "home"
            referencedColumns: ["id"]
          },
        ]
      }
      automationVersion: {
        Row: {
          automationId: string
          automationVersionId: string
          createdAt: string
          graph: Json
          homeId: string
          version: number
        }
        Insert: {
          automationId: string
          automationVersionId: string
          createdAt?: string
          graph: Json
          homeId: string
          version: number
        }
        Update: {
          automationId?: string
          automationVersionId?: string
          createdAt?: string
          graph?: Json
          homeId?: string
          version?: number
        }
        Relationships: [
          {
            foreignKeyName: "automationVersion_automationId_automation_id_fk"
            columns: ["automationId"]
            isOneToOne: false
            referencedRelation: "automation"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "automationVersion_homeId_home_id_fk"
            columns: ["homeId"]
            isOneToOne: false
            referencedRelation: "home"
            referencedColumns: ["id"]
          },
        ]
      }
      device: {
        Row: {
          createdAt: string
          homeId: string
          id: string
          ipAddress: unknown | null
          manufacturer: string | null
          matterNodeId: number | null
          metadata: Json | null
          model: string | null
          name: string
          roomId: string | null
          swVersion: string | null
          updatedAt: string
          viaDeviceId: string | null
        }
        Insert: {
          createdAt?: string
          homeId: string
          id: string
          ipAddress?: unknown | null
          manufacturer?: string | null
          matterNodeId?: number | null
          metadata?: Json | null
          model?: string | null
          name: string
          roomId?: string | null
          swVersion?: string | null
          updatedAt?: string
          viaDeviceId?: string | null
        }
        Update: {
          createdAt?: string
          homeId?: string
          id?: string
          ipAddress?: unknown | null
          manufacturer?: string | null
          matterNodeId?: number | null
          metadata?: Json | null
          model?: string | null
          name?: string
          roomId?: string | null
          swVersion?: string | null
          updatedAt?: string
          viaDeviceId?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "device_homeId_home_id_fk"
            columns: ["homeId"]
            isOneToOne: false
            referencedRelation: "home"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "device_roomId_room_id_fk"
            columns: ["roomId"]
            isOneToOne: false
            referencedRelation: "room"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "device_viaDeviceId_device_id_fk"
            columns: ["viaDeviceId"]
            isOneToOne: false
            referencedRelation: "device"
            referencedColumns: ["id"]
          },
        ]
      }
      entity: {
        Row: {
          deviceId: string
          id: string
          key: string
          kind: string
          traits: Json
        }
        Insert: {
          deviceId: string
          id: string
          key: string
          kind: string
          traits: Json
        }
        Update: {
          deviceId?: string
          id?: string
          key?: string
          kind?: string
          traits?: Json
        }
        Relationships: [
          {
            foreignKeyName: "entity_deviceId_device_id_fk"
            columns: ["deviceId"]
            isOneToOne: false
            referencedRelation: "device"
            referencedColumns: ["id"]
          },
        ]
      }
      entityState: {
        Row: {
          attrs: Json | null
          entityId: string
          state: string
          updatedAt: string
        }
        Insert: {
          attrs?: Json | null
          entityId: string
          state: string
          updatedAt?: string
        }
        Update: {
          attrs?: Json | null
          entityId?: string
          state?: string
          updatedAt?: string
        }
        Relationships: [
          {
            foreignKeyName: "entityState_entityId_entity_id_fk"
            columns: ["entityId"]
            isOneToOne: true
            referencedRelation: "entity"
            referencedColumns: ["id"]
          },
        ]
      }
      entityStateHistory: {
        Row: {
          attrs: Json | null
          entityId: string
          homeId: string
          id: number
          state: string
          ts: string
        }
        Insert: {
          attrs?: Json | null
          entityId: string
          homeId: string
          id?: number
          state: string
          ts: string
        }
        Update: {
          attrs?: Json | null
          entityId?: string
          homeId?: string
          id?: number
          state?: string
          ts?: string
        }
        Relationships: [
          {
            foreignKeyName: "entityStateHistory_entityId_entity_id_fk"
            columns: ["entityId"]
            isOneToOne: false
            referencedRelation: "entity"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "entityStateHistory_homeId_home_id_fk"
            columns: ["homeId"]
            isOneToOne: false
            referencedRelation: "home"
            referencedColumns: ["id"]
          },
        ]
      }
      event: {
        Row: {
          contextId: string | null
          eventTypeId: number
          homeId: string
          id: number
          originIdx: number | null
          payloadId: number | null
          ts: string
        }
        Insert: {
          contextId?: string | null
          eventTypeId: number
          homeId: string
          id?: number
          originIdx?: number | null
          payloadId?: number | null
          ts: string
        }
        Update: {
          contextId?: string | null
          eventTypeId?: number
          homeId?: string
          id?: number
          originIdx?: number | null
          payloadId?: number | null
          ts?: string
        }
        Relationships: [
          {
            foreignKeyName: "event_eventTypeId_eventType_id_fk"
            columns: ["eventTypeId"]
            isOneToOne: false
            referencedRelation: "eventType"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "event_homeId_home_id_fk"
            columns: ["homeId"]
            isOneToOne: false
            referencedRelation: "home"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "event_payloadId_eventPayload_id_fk"
            columns: ["payloadId"]
            isOneToOne: false
            referencedRelation: "eventPayload"
            referencedColumns: ["id"]
          },
        ]
      }
      eventPayload: {
        Row: {
          body: Json
          hash: number | null
          id: number
        }
        Insert: {
          body: Json
          hash?: number | null
          id?: number
        }
        Update: {
          body?: Json
          hash?: number | null
          id?: number
        }
        Relationships: []
      }
      eventType: {
        Row: {
          eventType: string
          id: number
        }
        Insert: {
          eventType: string
          id?: number
        }
        Update: {
          eventType?: string
          id?: number
        }
        Relationships: []
      }
      floor: {
        Row: {
          homeId: string
          id: string
          index: number
          name: string | null
        }
        Insert: {
          homeId: string
          id: string
          index: number
          name?: string | null
        }
        Update: {
          homeId?: string
          id?: string
          index?: number
          name?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "floor_homeId_home_id_fk"
            columns: ["homeId"]
            isOneToOne: false
            referencedRelation: "home"
            referencedColumns: ["id"]
          },
        ]
      }
      home: {
        Row: {
          address: Json | null
          createdAt: string
          createdBy: string | null
          id: string
          name: string
          timezone: string
          updatedAt: string
        }
        Insert: {
          address?: Json | null
          createdAt?: string
          createdBy?: string | null
          id: string
          name: string
          timezone?: string
          updatedAt?: string
        }
        Update: {
          address?: Json | null
          createdAt?: string
          createdBy?: string | null
          id?: string
          name?: string
          timezone?: string
          updatedAt?: string
        }
        Relationships: [
          {
            foreignKeyName: "home_createdBy_users_id_fk"
            columns: ["createdBy"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
        ]
      }
      mode: {
        Row: {
          homeId: string
          id: string
          key: Database["public"]["Enums"]["homeMode"]
          policy: Json | null
        }
        Insert: {
          homeId: string
          id: string
          key: Database["public"]["Enums"]["homeMode"]
          policy?: Json | null
        }
        Update: {
          homeId?: string
          id?: string
          key?: Database["public"]["Enums"]["homeMode"]
          policy?: Json | null
        }
        Relationships: [
          {
            foreignKeyName: "mode_homeId_home_id_fk"
            columns: ["homeId"]
            isOneToOne: false
            referencedRelation: "home"
            referencedColumns: ["id"]
          },
        ]
      }
      room: {
        Row: {
          floorId: string | null
          homeId: string
          id: string
          name: string
        }
        Insert: {
          floorId?: string | null
          homeId: string
          id: string
          name: string
        }
        Update: {
          floorId?: string | null
          homeId?: string
          id?: string
          name?: string
        }
        Relationships: [
          {
            foreignKeyName: "room_floorId_floor_id_fk"
            columns: ["floorId"]
            isOneToOne: false
            referencedRelation: "floor"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "room_homeId_home_id_fk"
            columns: ["homeId"]
            isOneToOne: false
            referencedRelation: "home"
            referencedColumns: ["id"]
          },
        ]
      }
      scene: {
        Row: {
          createdAt: string
          createdBy: string | null
          homeId: string
          id: string
          name: string
        }
        Insert: {
          createdAt?: string
          createdBy?: string | null
          homeId: string
          id: string
          name: string
        }
        Update: {
          createdAt?: string
          createdBy?: string | null
          homeId?: string
          id?: string
          name?: string
        }
        Relationships: [
          {
            foreignKeyName: "scene_createdBy_users_id_fk"
            columns: ["createdBy"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "scene_homeId_home_id_fk"
            columns: ["homeId"]
            isOneToOne: false
            referencedRelation: "home"
            referencedColumns: ["id"]
          },
        ]
      }
      sceneVersion: {
        Row: {
          createdAt: string
          homeId: string
          note: string | null
          sceneId: string
          sceneVersionId: string
          steps: Json
          version: number
        }
        Insert: {
          createdAt?: string
          homeId: string
          note?: string | null
          sceneId: string
          sceneVersionId: string
          steps: Json
          version: number
        }
        Update: {
          createdAt?: string
          homeId?: string
          note?: string | null
          sceneId?: string
          sceneVersionId?: string
          steps?: Json
          version?: number
        }
        Relationships: [
          {
            foreignKeyName: "sceneVersion_homeId_home_id_fk"
            columns: ["homeId"]
            isOneToOne: false
            referencedRelation: "home"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "sceneVersion_sceneId_scene_id_fk"
            columns: ["sceneId"]
            isOneToOne: false
            referencedRelation: "scene"
            referencedColumns: ["id"]
          },
        ]
      }
      users: {
        Row: {
          createdAt: string
          email: string
          firstName: string | null
          homeId: string | null
          id: string
          imageUrl: string | null
          lastName: string | null
          role: Database["public"]["Enums"]["userRole"]
          updatedAt: string
        }
        Insert: {
          createdAt?: string
          email: string
          firstName?: string | null
          homeId?: string | null
          id: string
          imageUrl?: string | null
          lastName?: string | null
          role?: Database["public"]["Enums"]["userRole"]
          updatedAt?: string
        }
        Update: {
          createdAt?: string
          email?: string
          firstName?: string | null
          homeId?: string | null
          id?: string
          imageUrl?: string | null
          lastName?: string | null
          role?: Database["public"]["Enums"]["userRole"]
          updatedAt?: string
        }
        Relationships: [
          {
            foreignKeyName: "users_homeId_home_id_fk"
            columns: ["homeId"]
            isOneToOne: false
            referencedRelation: "home"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      add_compression_policy: {
        Args: {
          compress_after?: unknown
          compress_created_before?: unknown
          hypertable: unknown
          if_not_exists?: boolean
          initial_start?: string
          schedule_interval?: unknown
          timezone?: string
        }
        Returns: number
      }
      add_continuous_aggregate_policy: {
        Args: {
          continuous_aggregate: unknown
          end_offset: unknown
          if_not_exists?: boolean
          initial_start?: string
          schedule_interval: unknown
          start_offset: unknown
          timezone?: string
        }
        Returns: number
      }
      add_dimension: {
        Args:
          | {
              chunk_time_interval?: unknown
              column_name: unknown
              hypertable: unknown
              if_not_exists?: boolean
              number_partitions?: number
              partitioning_func?: unknown
            }
          | { dimension: unknown; hypertable: unknown; if_not_exists?: boolean }
        Returns: {
          created: boolean
          dimension_id: number
        }[]
      }
      add_job: {
        Args: {
          check_config?: unknown
          config?: Json
          fixed_schedule?: boolean
          initial_start?: string
          proc: unknown
          schedule_interval: unknown
          scheduled?: boolean
          timezone?: string
        }
        Returns: number
      }
      add_reorder_policy: {
        Args: {
          hypertable: unknown
          if_not_exists?: boolean
          index_name: unknown
          initial_start?: string
          timezone?: string
        }
        Returns: number
      }
      add_retention_policy: {
        Args: {
          drop_after?: unknown
          drop_created_before?: unknown
          if_not_exists?: boolean
          initial_start?: string
          relation: unknown
          schedule_interval?: unknown
          timezone?: string
        }
        Returns: number
      }
      alter_job: {
        Args: {
          check_config?: unknown
          config?: Json
          fixed_schedule?: boolean
          if_exists?: boolean
          initial_start?: string
          job_id: number
          max_retries?: number
          max_runtime?: unknown
          next_start?: string
          retry_period?: unknown
          schedule_interval?: unknown
          scheduled?: boolean
          timezone?: string
        }
        Returns: {
          check_config: string
          config: Json
          fixed_schedule: boolean
          initial_start: string
          job_id: number
          max_retries: number
          max_runtime: unknown
          next_start: string
          retry_period: unknown
          schedule_interval: unknown
          scheduled: boolean
          timezone: string
        }[]
      }
      approximate_row_count: {
        Args: { relation: unknown }
        Returns: number
      }
      attach_tablespace: {
        Args: {
          hypertable: unknown
          if_not_attached?: boolean
          tablespace: unknown
        }
        Returns: undefined
      }
      by_hash: {
        Args: {
          column_name: unknown
          number_partitions: number
          partition_func?: unknown
        }
        Returns: unknown
      }
      by_range: {
        Args: {
          column_name: unknown
          partition_func?: unknown
          partition_interval?: unknown
        }
        Returns: unknown
      }
      chunk_compression_stats: {
        Args: { hypertable: unknown }
        Returns: {
          after_compression_index_bytes: number
          after_compression_table_bytes: number
          after_compression_toast_bytes: number
          after_compression_total_bytes: number
          before_compression_index_bytes: number
          before_compression_table_bytes: number
          before_compression_toast_bytes: number
          before_compression_total_bytes: number
          chunk_name: unknown
          chunk_schema: unknown
          compression_status: string
          node_name: unknown
        }[]
      }
      chunks_detailed_size: {
        Args: { hypertable: unknown }
        Returns: {
          chunk_name: unknown
          chunk_schema: unknown
          index_bytes: number
          node_name: unknown
          table_bytes: number
          toast_bytes: number
          total_bytes: number
        }[]
      }
      compress_chunk: {
        Args: {
          if_not_compressed?: boolean
          recompress?: boolean
          uncompressed_chunk: unknown
        }
        Returns: unknown
      }
      create_hypertable: {
        Args:
          | {
              associated_schema_name?: unknown
              associated_table_prefix?: unknown
              chunk_sizing_func?: unknown
              chunk_target_size?: string
              chunk_time_interval?: unknown
              create_default_indexes?: boolean
              if_not_exists?: boolean
              migrate_data?: boolean
              number_partitions?: number
              partitioning_column?: unknown
              partitioning_func?: unknown
              relation: unknown
              time_column_name: unknown
              time_partitioning_func?: unknown
            }
          | {
              create_default_indexes?: boolean
              dimension: unknown
              if_not_exists?: boolean
              migrate_data?: boolean
              relation: unknown
            }
        Returns: {
          created: boolean
          hypertable_id: number
        }[]
      }
      decompress_chunk: {
        Args: { if_compressed?: boolean; uncompressed_chunk: unknown }
        Returns: unknown
      }
      delete_job: {
        Args: { job_id: number }
        Returns: undefined
      }
      detach_tablespace: {
        Args: {
          hypertable?: unknown
          if_attached?: boolean
          tablespace: unknown
        }
        Returns: number
      }
      detach_tablespaces: {
        Args: { hypertable: unknown }
        Returns: number
      }
      disable_chunk_skipping: {
        Args: {
          column_name: unknown
          hypertable: unknown
          if_not_exists?: boolean
        }
        Returns: {
          column_name: unknown
          disabled: boolean
          hypertable_id: number
        }[]
      }
      drop_chunks: {
        Args: {
          created_after?: unknown
          created_before?: unknown
          newer_than?: unknown
          older_than?: unknown
          relation: unknown
          verbose?: boolean
        }
        Returns: string[]
      }
      enable_chunk_skipping: {
        Args: {
          column_name: unknown
          hypertable: unknown
          if_not_exists?: boolean
        }
        Returns: {
          column_stats_id: number
          enabled: boolean
        }[]
      }
      get_telemetry_report: {
        Args: Record<PropertyKey, never>
        Returns: Json
      }
      hypertable_approximate_detailed_size: {
        Args: { relation: unknown }
        Returns: {
          index_bytes: number
          table_bytes: number
          toast_bytes: number
          total_bytes: number
        }[]
      }
      hypertable_approximate_size: {
        Args: { hypertable: unknown }
        Returns: number
      }
      hypertable_compression_stats: {
        Args: { hypertable: unknown }
        Returns: {
          after_compression_index_bytes: number
          after_compression_table_bytes: number
          after_compression_toast_bytes: number
          after_compression_total_bytes: number
          before_compression_index_bytes: number
          before_compression_table_bytes: number
          before_compression_toast_bytes: number
          before_compression_total_bytes: number
          node_name: unknown
          number_compressed_chunks: number
          total_chunks: number
        }[]
      }
      hypertable_detailed_size: {
        Args: { hypertable: unknown }
        Returns: {
          index_bytes: number
          node_name: unknown
          table_bytes: number
          toast_bytes: number
          total_bytes: number
        }[]
      }
      hypertable_index_size: {
        Args: { index_name: unknown }
        Returns: number
      }
      hypertable_size: {
        Args: { hypertable: unknown }
        Returns: number
      }
      interpolate: {
        Args:
          | {
              next?: Record<string, unknown>
              prev?: Record<string, unknown>
              value: number
            }
          | {
              next?: Record<string, unknown>
              prev?: Record<string, unknown>
              value: number
            }
          | {
              next?: Record<string, unknown>
              prev?: Record<string, unknown>
              value: number
            }
          | {
              next?: Record<string, unknown>
              prev?: Record<string, unknown>
              value: number
            }
          | {
              next?: Record<string, unknown>
              prev?: Record<string, unknown>
              value: number
            }
        Returns: number
      }
      locf: {
        Args: {
          prev?: unknown
          treat_null_as_missing?: boolean
          value: unknown
        }
        Returns: unknown
      }
      move_chunk: {
        Args: {
          chunk: unknown
          destination_tablespace: unknown
          index_destination_tablespace?: unknown
          reorder_index?: unknown
          verbose?: boolean
        }
        Returns: undefined
      }
      remove_compression_policy: {
        Args: { hypertable: unknown; if_exists?: boolean }
        Returns: boolean
      }
      remove_continuous_aggregate_policy: {
        Args: {
          continuous_aggregate: unknown
          if_exists?: boolean
          if_not_exists?: boolean
        }
        Returns: undefined
      }
      remove_reorder_policy: {
        Args: { hypertable: unknown; if_exists?: boolean }
        Returns: undefined
      }
      remove_retention_policy: {
        Args: { if_exists?: boolean; relation: unknown }
        Returns: undefined
      }
      reorder_chunk: {
        Args: { chunk: unknown; index?: unknown; verbose?: boolean }
        Returns: undefined
      }
      set_adaptive_chunking: {
        Args: {
          chunk_sizing_func?: unknown
          chunk_target_size: string
          hypertable: unknown
        }
        Returns: Record<string, unknown>
      }
      set_chunk_time_interval: {
        Args: {
          chunk_time_interval: unknown
          dimension_name?: unknown
          hypertable: unknown
        }
        Returns: undefined
      }
      set_integer_now_func: {
        Args: {
          hypertable: unknown
          integer_now_func: unknown
          replace_if_exists?: boolean
        }
        Returns: undefined
      }
      set_number_partitions: {
        Args: {
          dimension_name?: unknown
          hypertable: unknown
          number_partitions: number
        }
        Returns: undefined
      }
      set_partitioning_interval: {
        Args: {
          dimension_name?: unknown
          hypertable: unknown
          partition_interval: unknown
        }
        Returns: undefined
      }
      show_chunks: {
        Args: {
          created_after?: unknown
          created_before?: unknown
          newer_than?: unknown
          older_than?: unknown
          relation: unknown
        }
        Returns: unknown[]
      }
      show_tablespaces: {
        Args: { hypertable: unknown }
        Returns: unknown[]
      }
      time_bucket: {
        Args:
          | { bucket_width: number; offset: number; ts: number }
          | { bucket_width: number; offset: number; ts: number }
          | { bucket_width: number; offset: number; ts: number }
          | { bucket_width: number; ts: number }
          | { bucket_width: number; ts: number }
          | { bucket_width: number; ts: number }
          | { bucket_width: unknown; offset: unknown; ts: string }
          | { bucket_width: unknown; offset: unknown; ts: string }
          | { bucket_width: unknown; offset: unknown; ts: string }
          | {
              bucket_width: unknown
              offset?: unknown
              origin?: string
              timezone: string
              ts: string
            }
          | { bucket_width: unknown; origin: string; ts: string }
          | { bucket_width: unknown; origin: string; ts: string }
          | { bucket_width: unknown; origin: string; ts: string }
          | { bucket_width: unknown; ts: string }
          | { bucket_width: unknown; ts: string }
          | { bucket_width: unknown; ts: string }
        Returns: string
      }
      time_bucket_gapfill: {
        Args:
          | {
              bucket_width: number
              finish?: number
              start?: number
              ts: number
            }
          | {
              bucket_width: number
              finish?: number
              start?: number
              ts: number
            }
          | {
              bucket_width: number
              finish?: number
              start?: number
              ts: number
            }
          | {
              bucket_width: unknown
              finish?: string
              start?: string
              timezone: string
              ts: string
            }
          | {
              bucket_width: unknown
              finish?: string
              start?: string
              ts: string
            }
          | {
              bucket_width: unknown
              finish?: string
              start?: string
              ts: string
            }
          | {
              bucket_width: unknown
              finish?: string
              start?: string
              ts: string
            }
        Returns: string
      }
      timescaledb_post_restore: {
        Args: Record<PropertyKey, never>
        Returns: boolean
      }
      timescaledb_pre_restore: {
        Args: Record<PropertyKey, never>
        Returns: boolean
      }
    }
    Enums: {
      homeMode: "HOME" | "AWAY" | "SLEEP" | "VACATION" | "GUEST" | "CUSTOM"
      userRole: "OWNER" | "ADULT" | "CHILD" | "GUEST" | "SERVICE"
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type DatabaseWithoutInternals = Omit<Database, "__InternalSupabase">

type DefaultSchema = DatabaseWithoutInternals[Extract<keyof Database, "public">]

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof DatabaseWithoutInternals },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof DatabaseWithoutInternals },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never

export const Constants = {
  public: {
    Enums: {
      homeMode: ["HOME", "AWAY", "SLEEP", "VACATION", "GUEST", "CUSTOM"],
      userRole: ["OWNER", "ADULT", "CHILD", "GUEST", "SERVICE"],
    },
  },
} as const

