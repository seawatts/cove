// !!!GENERATED FILE, DO NOT EDIT!!!
// This file is auto-generated by supabase in scripts/generate-types.ts
// Schema: public
// Generated at: 2025-10-19T22:04:13.123Z

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];

export type Database = {
  public: {
    Tables: {
      devices: {
        Row: {
          available: boolean;
          categories: Json | null;
          configUrl: string | null;
          createdAt: string;
          disabledBy: string | null;
          entryType: string | null;
          externalId: string | null;
          homeId: string;
          hostname: string | null;
          hwVersion: string | null;
          id: string;
          ipAddress: unknown | null;
          lastSeen: string | null;
          macAddress: string | null;
          manufacturer: string | null;
          matterNodeId: number | null;
          metadata: Json | null;
          model: string | null;
          name: string;
          online: boolean;
          port: number | null;
          protocol: string;
          roomId: string | null;
          swVersion: string | null;
          type: string | null;
          updatedAt: string;
          viaDeviceId: string | null;
        };
        Insert: {
          available?: boolean;
          categories?: Json | null;
          configUrl?: string | null;
          createdAt?: string;
          disabledBy?: string | null;
          entryType?: string | null;
          externalId?: string | null;
          homeId: string;
          hostname?: string | null;
          hwVersion?: string | null;
          id: string;
          ipAddress?: unknown | null;
          lastSeen?: string | null;
          macAddress?: string | null;
          manufacturer?: string | null;
          matterNodeId?: number | null;
          metadata?: Json | null;
          model?: string | null;
          name: string;
          online?: boolean;
          port?: number | null;
          protocol: string;
          roomId?: string | null;
          swVersion?: string | null;
          type?: string | null;
          updatedAt?: string;
          viaDeviceId?: string | null;
        };
        Update: {
          available?: boolean;
          categories?: Json | null;
          configUrl?: string | null;
          createdAt?: string;
          disabledBy?: string | null;
          entryType?: string | null;
          externalId?: string | null;
          homeId?: string;
          hostname?: string | null;
          hwVersion?: string | null;
          id?: string;
          ipAddress?: unknown | null;
          lastSeen?: string | null;
          macAddress?: string | null;
          manufacturer?: string | null;
          matterNodeId?: number | null;
          metadata?: Json | null;
          model?: string | null;
          name?: string;
          online?: boolean;
          port?: number | null;
          protocol?: string;
          roomId?: string | null;
          swVersion?: string | null;
          type?: string | null;
          updatedAt?: string;
          viaDeviceId?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'devices_homeId_homes_id_fk';
            columns: ['homeId'];
            isOneToOne: false;
            referencedRelation: 'homes';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'devices_roomId_rooms_id_fk';
            columns: ['roomId'];
            isOneToOne: false;
            referencedRelation: 'rooms';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'devices_viaDeviceId_devices_id_fk';
            columns: ['viaDeviceId'];
            isOneToOne: false;
            referencedRelation: 'devices';
            referencedColumns: ['id'];
          },
        ];
      };
      entities: {
        Row: {
          capabilities: Json;
          deviceClass: string | null;
          deviceId: string;
          id: string;
          key: string;
          kind: Database['public']['Enums']['entityKind'];
          name: string | null;
        };
        Insert: {
          capabilities?: Json;
          deviceClass?: string | null;
          deviceId: string;
          id: string;
          key: string;
          kind: Database['public']['Enums']['entityKind'];
          name?: string | null;
        };
        Update: {
          capabilities?: Json;
          deviceClass?: string | null;
          deviceId?: string;
          id?: string;
          key?: string;
          kind?: Database['public']['Enums']['entityKind'];
          name?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'entities_deviceId_devices_id_fk';
            columns: ['deviceId'];
            isOneToOne: false;
            referencedRelation: 'devices';
            referencedColumns: ['id'];
          },
        ];
      };
      entityStateHistories: {
        Row: {
          attrs: Json | null;
          entityId: string;
          homeId: string;
          id: number;
          state: string;
          ts: string;
        };
        Insert: {
          attrs?: Json | null;
          entityId: string;
          homeId: string;
          id?: number;
          state: string;
          ts: string;
        };
        Update: {
          attrs?: Json | null;
          entityId?: string;
          homeId?: string;
          id?: number;
          state?: string;
          ts?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'entityStateHistories_entityId_entities_id_fk';
            columns: ['entityId'];
            isOneToOne: false;
            referencedRelation: 'entities';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'entityStateHistories_homeId_homes_id_fk';
            columns: ['homeId'];
            isOneToOne: false;
            referencedRelation: 'homes';
            referencedColumns: ['id'];
          },
        ];
      };
      entityStates: {
        Row: {
          attrs: Json | null;
          entityId: string;
          state: string;
          updatedAt: string;
        };
        Insert: {
          attrs?: Json | null;
          entityId: string;
          state: string;
          updatedAt?: string;
        };
        Update: {
          attrs?: Json | null;
          entityId?: string;
          state?: string;
          updatedAt?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'entityStates_entityId_entities_id_fk';
            columns: ['entityId'];
            isOneToOne: true;
            referencedRelation: 'entities';
            referencedColumns: ['id'];
          },
        ];
      };
      events: {
        Row: {
          deviceId: string | null;
          entityId: string | null;
          eventType: string;
          homeId: string;
          id: number;
          message: string;
          metadata: Json | null;
          ts: string;
        };
        Insert: {
          deviceId?: string | null;
          entityId?: string | null;
          eventType: string;
          homeId: string;
          id?: number;
          message: string;
          metadata?: Json | null;
          ts: string;
        };
        Update: {
          deviceId?: string | null;
          entityId?: string | null;
          eventType?: string;
          homeId?: string;
          id?: number;
          message?: string;
          metadata?: Json | null;
          ts?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'events_deviceId_devices_id_fk';
            columns: ['deviceId'];
            isOneToOne: false;
            referencedRelation: 'devices';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'events_entityId_entities_id_fk';
            columns: ['entityId'];
            isOneToOne: false;
            referencedRelation: 'entities';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'events_homeId_homes_id_fk';
            columns: ['homeId'];
            isOneToOne: false;
            referencedRelation: 'homes';
            referencedColumns: ['id'];
          },
        ];
      };
      homes: {
        Row: {
          address: Json | null;
          createdAt: string;
          createdBy: string | null;
          id: string;
          name: string;
          timezone: string;
          updatedAt: string;
        };
        Insert: {
          address?: Json | null;
          createdAt?: string;
          createdBy?: string | null;
          id: string;
          name: string;
          timezone?: string;
          updatedAt?: string;
        };
        Update: {
          address?: Json | null;
          createdAt?: string;
          createdBy?: string | null;
          id?: string;
          name?: string;
          timezone?: string;
          updatedAt?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'homes_createdBy_users_id_fk';
            columns: ['createdBy'];
            isOneToOne: false;
            referencedRelation: 'users';
            referencedColumns: ['id'];
          },
        ];
      };
      rooms: {
        Row: {
          floor: number | null;
          homeId: string;
          id: string;
          name: string;
        };
        Insert: {
          floor?: number | null;
          homeId: string;
          id: string;
          name: string;
        };
        Update: {
          floor?: number | null;
          homeId?: string;
          id?: string;
          name?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'rooms_homeId_homes_id_fk';
            columns: ['homeId'];
            isOneToOne: false;
            referencedRelation: 'homes';
            referencedColumns: ['id'];
          },
        ];
      };
      users: {
        Row: {
          createdAt: string;
          email: string;
          firstName: string | null;
          homeId: string | null;
          id: string;
          imageUrl: string | null;
          lastName: string | null;
          role: Database['public']['Enums']['userRole'];
          updatedAt: string;
        };
        Insert: {
          createdAt?: string;
          email: string;
          firstName?: string | null;
          homeId?: string | null;
          id: string;
          imageUrl?: string | null;
          lastName?: string | null;
          role?: Database['public']['Enums']['userRole'];
          updatedAt?: string;
        };
        Update: {
          createdAt?: string;
          email?: string;
          firstName?: string | null;
          homeId?: string | null;
          id?: string;
          imageUrl?: string | null;
          lastName?: string | null;
          role?: Database['public']['Enums']['userRole'];
          updatedAt?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'users_homeId_homes_id_fk';
            columns: ['homeId'];
            isOneToOne: false;
            referencedRelation: 'homes';
            referencedColumns: ['id'];
          },
        ];
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      entityKind:
        | 'alarm_control_panel'
        | 'binary_sensor'
        | 'button'
        | 'camera'
        | 'climate'
        | 'color'
        | 'cover'
        | 'date'
        | 'datetime'
        | 'event'
        | 'fan'
        | 'light'
        | 'lock'
        | 'media_player'
        | 'number'
        | 'outlet'
        | 'select'
        | 'sensor'
        | 'siren'
        | 'speaker'
        | 'switch'
        | 'text'
        | 'text_sensor'
        | 'thermostat'
        | 'time'
        | 'update'
        | 'valve'
        | 'other';
      userRole: 'OWNER' | 'ADULT' | 'CHILD' | 'GUEST' | 'SERVICE';
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
};

type DatabaseWithoutInternals = Omit<Database, '__InternalSupabase'>;

type DefaultSchema = DatabaseWithoutInternals[Extract<
  keyof Database,
  'public'
>];

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema['Tables'] & DefaultSchema['Views'])
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables'] &
        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Views'])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables'] &
      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Views'])[TableName] extends {
      Row: infer R;
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema['Tables'] &
        DefaultSchema['Views'])
    ? (DefaultSchema['Tables'] &
        DefaultSchema['Views'])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R;
      }
      ? R
      : never
    : never;

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema['Tables']
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables']
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables'][TableName] extends {
      Insert: infer I;
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema['Tables']
    ? DefaultSchema['Tables'][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I;
      }
      ? I
      : never
    : never;

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema['Tables']
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables']
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables'][TableName] extends {
      Update: infer U;
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema['Tables']
    ? DefaultSchema['Tables'][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U;
      }
      ? U
      : never
    : never;

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema['Enums']
    | { schema: keyof DatabaseWithoutInternals },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions['schema']]['Enums']
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions['schema']]['Enums'][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema['Enums']
    ? DefaultSchema['Enums'][DefaultSchemaEnumNameOrOptions]
    : never;

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema['CompositeTypes']
    | { schema: keyof DatabaseWithoutInternals },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions['schema']]['CompositeTypes']
    : never = never,
> = PublicCompositeTypeNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions['schema']]['CompositeTypes'][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema['CompositeTypes']
    ? DefaultSchema['CompositeTypes'][PublicCompositeTypeNameOrOptions]
    : never;

export const Constants = {
  public: {
    Enums: {
      entityKind: [
        'alarm_control_panel',
        'binary_sensor',
        'button',
        'camera',
        'climate',
        'color',
        'cover',
        'date',
        'datetime',
        'event',
        'fan',
        'light',
        'lock',
        'media_player',
        'number',
        'outlet',
        'select',
        'sensor',
        'siren',
        'speaker',
        'switch',
        'text',
        'text_sensor',
        'thermostat',
        'time',
        'update',
        'valve',
        'other',
      ],
      userRole: ['OWNER', 'ADULT', 'CHILD', 'GUEST', 'SERVICE'],
    },
  },
} as const;
