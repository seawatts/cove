// !!!GENERATED FILE, DO NOT EDIT!!!
// This file is auto-generated by supabase in scripts/generate-types.ts
// Schema: public
// Generated at: 2025-10-15T05:08:15.467Z

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];

export type Database = {
  public: {
    Tables: {
      apiKeys: {
        Row: {
          createdAt: string;
          expiresAt: string | null;
          id: string;
          isActive: boolean;
          key: string;
          lastUsedAt: string | null;
          name: string;
          orgId: string;
          updatedAt: string | null;
          userId: string;
        };
        Insert: {
          createdAt?: string;
          expiresAt?: string | null;
          id: string;
          isActive?: boolean;
          key: string;
          lastUsedAt?: string | null;
          name: string;
          orgId?: string;
          updatedAt?: string | null;
          userId?: string;
        };
        Update: {
          createdAt?: string;
          expiresAt?: string | null;
          id?: string;
          isActive?: boolean;
          key?: string;
          lastUsedAt?: string | null;
          name?: string;
          orgId?: string;
          updatedAt?: string | null;
          userId?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'apiKeys_orgId_orgs_id_fk';
            columns: ['orgId'];
            isOneToOne: false;
            referencedRelation: 'orgs';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'apiKeys_userId_user_id_fk';
            columns: ['userId'];
            isOneToOne: false;
            referencedRelation: 'user';
            referencedColumns: ['id'];
          },
        ];
      };
      apiKeyUsage: {
        Row: {
          apiKeyId: string;
          createdAt: string;
          id: string;
          metadata: Json | null;
          orgId: string;
          type: Database['public']['Enums']['apiKeyUsageType'];
          updatedAt: string | null;
          userId: string;
        };
        Insert: {
          apiKeyId: string;
          createdAt?: string;
          id: string;
          metadata?: Json | null;
          orgId?: string;
          type: Database['public']['Enums']['apiKeyUsageType'];
          updatedAt?: string | null;
          userId?: string;
        };
        Update: {
          apiKeyId?: string;
          createdAt?: string;
          id?: string;
          metadata?: Json | null;
          orgId?: string;
          type?: Database['public']['Enums']['apiKeyUsageType'];
          updatedAt?: string | null;
          userId?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'apiKeyUsage_apiKeyId_apiKeys_id_fk';
            columns: ['apiKeyId'];
            isOneToOne: false;
            referencedRelation: 'apiKeys';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'apiKeyUsage_orgId_orgs_id_fk';
            columns: ['orgId'];
            isOneToOne: false;
            referencedRelation: 'orgs';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'apiKeyUsage_userId_user_id_fk';
            columns: ['userId'];
            isOneToOne: false;
            referencedRelation: 'user';
            referencedColumns: ['id'];
          },
        ];
      };
      authCodes: {
        Row: {
          createdAt: string;
          expiresAt: string;
          id: string;
          orgId: string;
          sessionId: string;
          updatedAt: string | null;
          usedAt: string | null;
          userId: string;
        };
        Insert: {
          createdAt?: string;
          expiresAt: string;
          id: string;
          orgId?: string;
          sessionId: string;
          updatedAt?: string | null;
          usedAt?: string | null;
          userId?: string;
        };
        Update: {
          createdAt?: string;
          expiresAt?: string;
          id?: string;
          orgId?: string;
          sessionId?: string;
          updatedAt?: string | null;
          usedAt?: string | null;
          userId?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'authCodes_orgId_orgs_id_fk';
            columns: ['orgId'];
            isOneToOne: false;
            referencedRelation: 'orgs';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'authCodes_userId_user_id_fk';
            columns: ['userId'];
            isOneToOne: false;
            referencedRelation: 'user';
            referencedColumns: ['id'];
          },
        ];
      };
      automations: {
        Row: {
          actions: Json;
          conditions: Json;
          createdAt: string;
          description: string | null;
          enabled: boolean;
          id: string;
          lastTriggered: string | null;
          name: string;
          orgId: string | null;
          trigger: Json;
          updatedAt: string | null;
          userId: string;
        };
        Insert: {
          actions: Json;
          conditions?: Json;
          createdAt?: string;
          description?: string | null;
          enabled?: boolean;
          id: string;
          lastTriggered?: string | null;
          name: string;
          orgId?: string | null;
          trigger: Json;
          updatedAt?: string | null;
          userId?: string;
        };
        Update: {
          actions?: Json;
          conditions?: Json;
          createdAt?: string;
          description?: string | null;
          enabled?: boolean;
          id?: string;
          lastTriggered?: string | null;
          name?: string;
          orgId?: string | null;
          trigger?: Json;
          updatedAt?: string | null;
          userId?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'automations_orgId_orgs_id_fk';
            columns: ['orgId'];
            isOneToOne: false;
            referencedRelation: 'orgs';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'automations_userId_user_id_fk';
            columns: ['userId'];
            isOneToOne: false;
            referencedRelation: 'user';
            referencedColumns: ['id'];
          },
        ];
      };
      commands: {
        Row: {
          capability: string;
          createdAt: string;
          deviceId: string;
          error: string | null;
          id: string;
          processedAt: string | null;
          status: Database['public']['Enums']['commandStatus'];
          userId: string;
          value: Json;
        };
        Insert: {
          capability: string;
          createdAt?: string;
          deviceId: string;
          error?: string | null;
          id: string;
          processedAt?: string | null;
          status?: Database['public']['Enums']['commandStatus'];
          userId?: string;
          value: Json;
        };
        Update: {
          capability?: string;
          createdAt?: string;
          deviceId?: string;
          error?: string | null;
          id?: string;
          processedAt?: string | null;
          status?: Database['public']['Enums']['commandStatus'];
          userId?: string;
          value?: Json;
        };
        Relationships: [
          {
            foreignKeyName: 'deviceCommands_deviceId_devices_id_fk';
            columns: ['deviceId'];
            isOneToOne: false;
            referencedRelation: 'devices';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'deviceCommands_userId_user_id_fk';
            columns: ['userId'];
            isOneToOne: false;
            referencedRelation: 'user';
            referencedColumns: ['id'];
          },
        ];
      };
      devices: {
        Row: {
          available: boolean;
          capabilities: Json;
          config: Json;
          createdAt: string;
          deviceType: Database['public']['Enums']['deviceType'];
          externalId: string;
          host: string | null;
          hubId: string | null;
          id: string;
          ipAddress: string | null;
          lastSeen: string | null;
          macAddress: string | null;
          manufacturer: string | null;
          model: string | null;
          name: string;
          online: boolean;
          orgId: string | null;
          protocol: Database['public']['Enums']['protocolType'] | null;
          roomId: string | null;
          state: Json;
          updatedAt: string | null;
          userId: string | null;
          version: string | null;
        };
        Insert: {
          available?: boolean;
          capabilities?: Json;
          config?: Json;
          createdAt?: string;
          deviceType: Database['public']['Enums']['deviceType'];
          externalId: string;
          host?: string | null;
          hubId?: string | null;
          id: string;
          ipAddress?: string | null;
          lastSeen?: string | null;
          macAddress?: string | null;
          manufacturer?: string | null;
          model?: string | null;
          name: string;
          online?: boolean;
          orgId?: string | null;
          protocol?: Database['public']['Enums']['protocolType'] | null;
          roomId?: string | null;
          state?: Json;
          updatedAt?: string | null;
          userId?: string | null;
          version?: string | null;
        };
        Update: {
          available?: boolean;
          capabilities?: Json;
          config?: Json;
          createdAt?: string;
          deviceType?: Database['public']['Enums']['deviceType'];
          externalId?: string;
          host?: string | null;
          hubId?: string | null;
          id?: string;
          ipAddress?: string | null;
          lastSeen?: string | null;
          macAddress?: string | null;
          manufacturer?: string | null;
          model?: string | null;
          name?: string;
          online?: boolean;
          orgId?: string | null;
          protocol?: Database['public']['Enums']['protocolType'] | null;
          roomId?: string | null;
          state?: Json;
          updatedAt?: string | null;
          userId?: string | null;
          version?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'devices_hubId_devices_id_fk';
            columns: ['hubId'];
            isOneToOne: false;
            referencedRelation: 'devices';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'devices_orgId_orgs_id_fk';
            columns: ['orgId'];
            isOneToOne: false;
            referencedRelation: 'orgs';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'devices_roomId_rooms_id_fk';
            columns: ['roomId'];
            isOneToOne: false;
            referencedRelation: 'rooms';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'devices_userId_user_id_fk';
            columns: ['userId'];
            isOneToOne: false;
            referencedRelation: 'user';
            referencedColumns: ['id'];
          },
        ];
      };
      events: {
        Row: {
          createdAt: string;
          deviceId: string;
          eventType: Database['public']['Enums']['eventType'];
          id: string;
          message: string;
          metadata: Json | null;
          severity: Database['public']['Enums']['eventSeverity'];
          stateId: string | null;
          timestamp: string;
        };
        Insert: {
          createdAt?: string;
          deviceId: string;
          eventType: Database['public']['Enums']['eventType'];
          id: string;
          message: string;
          metadata?: Json | null;
          severity?: Database['public']['Enums']['eventSeverity'];
          stateId?: string | null;
          timestamp?: string;
        };
        Update: {
          createdAt?: string;
          deviceId?: string;
          eventType?: Database['public']['Enums']['eventType'];
          id?: string;
          message?: string;
          metadata?: Json | null;
          severity?: Database['public']['Enums']['eventSeverity'];
          stateId?: string | null;
          timestamp?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'deviceEvents_deviceId_devices_id_fk';
            columns: ['deviceId'];
            isOneToOne: false;
            referencedRelation: 'devices';
            referencedColumns: ['id'];
          },
        ];
      };
      orgMembers: {
        Row: {
          createdAt: string | null;
          id: string;
          orgId: string;
          role: Database['public']['Enums']['userRole'];
          updatedAt: string | null;
          userId: string;
        };
        Insert: {
          createdAt?: string | null;
          id: string;
          orgId?: string;
          role?: Database['public']['Enums']['userRole'];
          updatedAt?: string | null;
          userId?: string;
        };
        Update: {
          createdAt?: string | null;
          id?: string;
          orgId?: string;
          role?: Database['public']['Enums']['userRole'];
          updatedAt?: string | null;
          userId?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'orgMembers_orgId_orgs_id_fk';
            columns: ['orgId'];
            isOneToOne: false;
            referencedRelation: 'orgs';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'orgMembers_userId_user_id_fk';
            columns: ['userId'];
            isOneToOne: false;
            referencedRelation: 'user';
            referencedColumns: ['id'];
          },
        ];
      };
      orgs: {
        Row: {
          clerkOrgId: string;
          createdAt: string | null;
          createdByUserId: string;
          id: string;
          name: string;
          stripeCustomerId: string | null;
          stripeSubscriptionId: string | null;
          stripeSubscriptionStatus:
            | Database['public']['Enums']['stripeSubscriptionStatus']
            | null;
          updatedAt: string | null;
        };
        Insert: {
          clerkOrgId: string;
          createdAt?: string | null;
          createdByUserId: string;
          id: string;
          name: string;
          stripeCustomerId?: string | null;
          stripeSubscriptionId?: string | null;
          stripeSubscriptionStatus?:
            | Database['public']['Enums']['stripeSubscriptionStatus']
            | null;
          updatedAt?: string | null;
        };
        Update: {
          clerkOrgId?: string;
          createdAt?: string | null;
          createdByUserId?: string;
          id?: string;
          name?: string;
          stripeCustomerId?: string | null;
          stripeSubscriptionId?: string | null;
          stripeSubscriptionStatus?:
            | Database['public']['Enums']['stripeSubscriptionStatus']
            | null;
          updatedAt?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'orgs_createdByUserId_user_id_fk';
            columns: ['createdByUserId'];
            isOneToOne: false;
            referencedRelation: 'user';
            referencedColumns: ['id'];
          },
        ];
      };
      rooms: {
        Row: {
          automationsEnabled: boolean;
          color: string | null;
          createdAt: string;
          description: string | null;
          floor: Json | null;
          icon: string | null;
          id: string;
          name: string;
          orgId: string | null;
          updatedAt: string | null;
          userId: string;
        };
        Insert: {
          automationsEnabled?: boolean;
          color?: string | null;
          createdAt?: string;
          description?: string | null;
          floor?: Json | null;
          icon?: string | null;
          id: string;
          name: string;
          orgId?: string | null;
          updatedAt?: string | null;
          userId?: string;
        };
        Update: {
          automationsEnabled?: boolean;
          color?: string | null;
          createdAt?: string;
          description?: string | null;
          floor?: Json | null;
          icon?: string | null;
          id?: string;
          name?: string;
          orgId?: string | null;
          updatedAt?: string | null;
          userId?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'rooms_orgId_orgs_id_fk';
            columns: ['orgId'];
            isOneToOne: false;
            referencedRelation: 'orgs';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'rooms_userId_user_id_fk';
            columns: ['userId'];
            isOneToOne: false;
            referencedRelation: 'user';
            referencedColumns: ['id'];
          },
        ];
      };
      scenes: {
        Row: {
          actions: Json;
          createdAt: string;
          description: string | null;
          icon: string | null;
          id: string;
          lastActivated: string | null;
          name: string;
          orgId: string | null;
          updatedAt: string | null;
          userId: string;
        };
        Insert: {
          actions: Json;
          createdAt?: string;
          description?: string | null;
          icon?: string | null;
          id: string;
          lastActivated?: string | null;
          name: string;
          orgId?: string | null;
          updatedAt?: string | null;
          userId?: string;
        };
        Update: {
          actions?: Json;
          createdAt?: string;
          description?: string | null;
          icon?: string | null;
          id?: string;
          lastActivated?: string | null;
          name?: string;
          orgId?: string | null;
          updatedAt?: string | null;
          userId?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'scenes_orgId_orgs_id_fk';
            columns: ['orgId'];
            isOneToOne: false;
            referencedRelation: 'orgs';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'scenes_userId_user_id_fk';
            columns: ['userId'];
            isOneToOne: false;
            referencedRelation: 'user';
            referencedColumns: ['id'];
          },
        ];
      };
      states: {
        Row: {
          attributes: Json | null;
          deviceId: string;
          id: string;
          lastChanged: string;
          lastUpdated: string;
          state: Json;
        };
        Insert: {
          attributes?: Json | null;
          deviceId: string;
          id: string;
          lastChanged?: string;
          lastUpdated?: string;
          state: Json;
        };
        Update: {
          attributes?: Json | null;
          deviceId?: string;
          id?: string;
          lastChanged?: string;
          lastUpdated?: string;
          state?: Json;
        };
        Relationships: [
          {
            foreignKeyName: 'deviceStateHistory_deviceId_devices_id_fk';
            columns: ['deviceId'];
            isOneToOne: false;
            referencedRelation: 'devices';
            referencedColumns: ['id'];
          },
        ];
      };
      user: {
        Row: {
          avatarUrl: string | null;
          clerkId: string;
          createdAt: string;
          email: string;
          firstName: string | null;
          id: string;
          lastLoggedInAt: string | null;
          lastName: string | null;
          online: boolean;
          updatedAt: string | null;
        };
        Insert: {
          avatarUrl?: string | null;
          clerkId: string;
          createdAt?: string;
          email: string;
          firstName?: string | null;
          id: string;
          lastLoggedInAt?: string | null;
          lastName?: string | null;
          online?: boolean;
          updatedAt?: string | null;
        };
        Update: {
          avatarUrl?: string | null;
          clerkId?: string;
          createdAt?: string;
          email?: string;
          firstName?: string | null;
          id?: string;
          lastLoggedInAt?: string | null;
          lastName?: string | null;
          online?: boolean;
          updatedAt?: string | null;
        };
        Relationships: [];
      };
      widgetPreferences: {
        Row: {
          createdAt: string;
          deviceId: string;
          id: string;
          sensorKey: string;
          updatedAt: string | null;
          userId: string;
          widgetConfig: Json | null;
          widgetType: string;
        };
        Insert: {
          createdAt?: string;
          deviceId: string;
          id: string;
          sensorKey: string;
          updatedAt?: string | null;
          userId: string;
          widgetConfig?: Json | null;
          widgetType: string;
        };
        Update: {
          createdAt?: string;
          deviceId?: string;
          id?: string;
          sensorKey?: string;
          updatedAt?: string | null;
          userId?: string;
          widgetConfig?: Json | null;
          widgetType?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'widgetPreferences_deviceId_devices_id_fk';
            columns: ['deviceId'];
            isOneToOne: false;
            referencedRelation: 'devices';
            referencedColumns: ['id'];
          },
        ];
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      add_compression_policy: {
        Args: {
          compress_after?: unknown;
          compress_created_before?: unknown;
          hypertable: unknown;
          if_not_exists?: boolean;
          initial_start?: string;
          schedule_interval?: unknown;
          timezone?: string;
        };
        Returns: number;
      };
      add_continuous_aggregate_policy: {
        Args: {
          continuous_aggregate: unknown;
          end_offset: unknown;
          if_not_exists?: boolean;
          initial_start?: string;
          schedule_interval: unknown;
          start_offset: unknown;
          timezone?: string;
        };
        Returns: number;
      };
      add_dimension: {
        Args:
          | {
              chunk_time_interval?: unknown;
              column_name: unknown;
              hypertable: unknown;
              if_not_exists?: boolean;
              number_partitions?: number;
              partitioning_func?: unknown;
            }
          | {
              dimension: unknown;
              hypertable: unknown;
              if_not_exists?: boolean;
            };
        Returns: {
          created: boolean;
          dimension_id: number;
        }[];
      };
      add_job: {
        Args: {
          check_config?: unknown;
          config?: Json;
          fixed_schedule?: boolean;
          initial_start?: string;
          proc: unknown;
          schedule_interval: unknown;
          scheduled?: boolean;
          timezone?: string;
        };
        Returns: number;
      };
      add_reorder_policy: {
        Args: {
          hypertable: unknown;
          if_not_exists?: boolean;
          index_name: unknown;
          initial_start?: string;
          timezone?: string;
        };
        Returns: number;
      };
      add_retention_policy: {
        Args: {
          drop_after?: unknown;
          drop_created_before?: unknown;
          if_not_exists?: boolean;
          initial_start?: string;
          relation: unknown;
          schedule_interval?: unknown;
          timezone?: string;
        };
        Returns: number;
      };
      alter_job: {
        Args: {
          check_config?: unknown;
          config?: Json;
          fixed_schedule?: boolean;
          if_exists?: boolean;
          initial_start?: string;
          job_id: number;
          max_retries?: number;
          max_runtime?: unknown;
          next_start?: string;
          retry_period?: unknown;
          schedule_interval?: unknown;
          scheduled?: boolean;
          timezone?: string;
        };
        Returns: {
          check_config: string;
          config: Json;
          fixed_schedule: boolean;
          initial_start: string;
          job_id: number;
          max_retries: number;
          max_runtime: unknown;
          next_start: string;
          retry_period: unknown;
          schedule_interval: unknown;
          scheduled: boolean;
          timezone: string;
        }[];
      };
      approximate_row_count: {
        Args: { relation: unknown };
        Returns: number;
      };
      attach_tablespace: {
        Args: {
          hypertable: unknown;
          if_not_attached?: boolean;
          tablespace: unknown;
        };
        Returns: undefined;
      };
      by_hash: {
        Args: {
          column_name: unknown;
          number_partitions: number;
          partition_func?: unknown;
        };
        Returns: unknown;
      };
      by_range: {
        Args: {
          column_name: unknown;
          partition_func?: unknown;
          partition_interval?: unknown;
        };
        Returns: unknown;
      };
      chunk_compression_stats: {
        Args: { hypertable: unknown };
        Returns: {
          after_compression_index_bytes: number;
          after_compression_table_bytes: number;
          after_compression_toast_bytes: number;
          after_compression_total_bytes: number;
          before_compression_index_bytes: number;
          before_compression_table_bytes: number;
          before_compression_toast_bytes: number;
          before_compression_total_bytes: number;
          chunk_name: unknown;
          chunk_schema: unknown;
          compression_status: string;
          node_name: unknown;
        }[];
      };
      chunks_detailed_size: {
        Args: { hypertable: unknown };
        Returns: {
          chunk_name: unknown;
          chunk_schema: unknown;
          index_bytes: number;
          node_name: unknown;
          table_bytes: number;
          toast_bytes: number;
          total_bytes: number;
        }[];
      };
      compress_chunk: {
        Args: {
          if_not_compressed?: boolean;
          recompress?: boolean;
          uncompressed_chunk: unknown;
        };
        Returns: unknown;
      };
      create_hypertable: {
        Args:
          | {
              associated_schema_name?: unknown;
              associated_table_prefix?: unknown;
              chunk_sizing_func?: unknown;
              chunk_target_size?: string;
              chunk_time_interval?: unknown;
              create_default_indexes?: boolean;
              if_not_exists?: boolean;
              migrate_data?: boolean;
              number_partitions?: number;
              partitioning_column?: unknown;
              partitioning_func?: unknown;
              relation: unknown;
              time_column_name: unknown;
              time_partitioning_func?: unknown;
            }
          | {
              create_default_indexes?: boolean;
              dimension: unknown;
              if_not_exists?: boolean;
              migrate_data?: boolean;
              relation: unknown;
            };
        Returns: {
          created: boolean;
          hypertable_id: number;
        }[];
      };
      decompress_chunk: {
        Args: { if_compressed?: boolean; uncompressed_chunk: unknown };
        Returns: unknown;
      };
      delete_job: {
        Args: { job_id: number };
        Returns: undefined;
      };
      detach_tablespace: {
        Args: {
          hypertable?: unknown;
          if_attached?: boolean;
          tablespace: unknown;
        };
        Returns: number;
      };
      detach_tablespaces: {
        Args: { hypertable: unknown };
        Returns: number;
      };
      disable_chunk_skipping: {
        Args: {
          column_name: unknown;
          hypertable: unknown;
          if_not_exists?: boolean;
        };
        Returns: {
          column_name: unknown;
          disabled: boolean;
          hypertable_id: number;
        }[];
      };
      drop_chunks: {
        Args: {
          created_after?: unknown;
          created_before?: unknown;
          newer_than?: unknown;
          older_than?: unknown;
          relation: unknown;
          verbose?: boolean;
        };
        Returns: string[];
      };
      enable_chunk_skipping: {
        Args: {
          column_name: unknown;
          hypertable: unknown;
          if_not_exists?: boolean;
        };
        Returns: {
          column_stats_id: number;
          enabled: boolean;
        }[];
      };
      get_telemetry_report: {
        Args: Record<PropertyKey, never>;
        Returns: Json;
      };
      hypertable_approximate_detailed_size: {
        Args: { relation: unknown };
        Returns: {
          index_bytes: number;
          table_bytes: number;
          toast_bytes: number;
          total_bytes: number;
        }[];
      };
      hypertable_approximate_size: {
        Args: { hypertable: unknown };
        Returns: number;
      };
      hypertable_compression_stats: {
        Args: { hypertable: unknown };
        Returns: {
          after_compression_index_bytes: number;
          after_compression_table_bytes: number;
          after_compression_toast_bytes: number;
          after_compression_total_bytes: number;
          before_compression_index_bytes: number;
          before_compression_table_bytes: number;
          before_compression_toast_bytes: number;
          before_compression_total_bytes: number;
          node_name: unknown;
          number_compressed_chunks: number;
          total_chunks: number;
        }[];
      };
      hypertable_detailed_size: {
        Args: { hypertable: unknown };
        Returns: {
          index_bytes: number;
          node_name: unknown;
          table_bytes: number;
          toast_bytes: number;
          total_bytes: number;
        }[];
      };
      hypertable_index_size: {
        Args: { index_name: unknown };
        Returns: number;
      };
      hypertable_size: {
        Args: { hypertable: unknown };
        Returns: number;
      };
      interpolate: {
        Args:
          | {
              next?: Record<string, unknown>;
              prev?: Record<string, unknown>;
              value: number;
            }
          | {
              next?: Record<string, unknown>;
              prev?: Record<string, unknown>;
              value: number;
            }
          | {
              next?: Record<string, unknown>;
              prev?: Record<string, unknown>;
              value: number;
            }
          | {
              next?: Record<string, unknown>;
              prev?: Record<string, unknown>;
              value: number;
            }
          | {
              next?: Record<string, unknown>;
              prev?: Record<string, unknown>;
              value: number;
            };
        Returns: number;
      };
      locf: {
        Args: {
          prev?: unknown;
          treat_null_as_missing?: boolean;
          value: unknown;
        };
        Returns: unknown;
      };
      move_chunk: {
        Args: {
          chunk: unknown;
          destination_tablespace: unknown;
          index_destination_tablespace?: unknown;
          reorder_index?: unknown;
          verbose?: boolean;
        };
        Returns: undefined;
      };
      remove_compression_policy: {
        Args: { hypertable: unknown; if_exists?: boolean };
        Returns: boolean;
      };
      remove_continuous_aggregate_policy: {
        Args: {
          continuous_aggregate: unknown;
          if_exists?: boolean;
          if_not_exists?: boolean;
        };
        Returns: undefined;
      };
      remove_reorder_policy: {
        Args: { hypertable: unknown; if_exists?: boolean };
        Returns: undefined;
      };
      remove_retention_policy: {
        Args: { if_exists?: boolean; relation: unknown };
        Returns: undefined;
      };
      reorder_chunk: {
        Args: { chunk: unknown; index?: unknown; verbose?: boolean };
        Returns: undefined;
      };
      requesting_org_id: {
        Args: Record<PropertyKey, never>;
        Returns: string;
      };
      requesting_user_id: {
        Args: Record<PropertyKey, never>;
        Returns: string;
      };
      set_adaptive_chunking: {
        Args: {
          chunk_sizing_func?: unknown;
          chunk_target_size: string;
          hypertable: unknown;
        };
        Returns: Record<string, unknown>;
      };
      set_chunk_time_interval: {
        Args: {
          chunk_time_interval: unknown;
          dimension_name?: unknown;
          hypertable: unknown;
        };
        Returns: undefined;
      };
      set_integer_now_func: {
        Args: {
          hypertable: unknown;
          integer_now_func: unknown;
          replace_if_exists?: boolean;
        };
        Returns: undefined;
      };
      set_number_partitions: {
        Args: {
          dimension_name?: unknown;
          hypertable: unknown;
          number_partitions: number;
        };
        Returns: undefined;
      };
      set_partitioning_interval: {
        Args: {
          dimension_name?: unknown;
          hypertable: unknown;
          partition_interval: unknown;
        };
        Returns: undefined;
      };
      show_chunks: {
        Args: {
          created_after?: unknown;
          created_before?: unknown;
          newer_than?: unknown;
          older_than?: unknown;
          relation: unknown;
        };
        Returns: unknown[];
      };
      show_tablespaces: {
        Args: { hypertable: unknown };
        Returns: unknown[];
      };
      time_bucket: {
        Args:
          | { bucket_width: number; offset: number; ts: number }
          | { bucket_width: number; offset: number; ts: number }
          | { bucket_width: number; offset: number; ts: number }
          | { bucket_width: number; ts: number }
          | { bucket_width: number; ts: number }
          | { bucket_width: number; ts: number }
          | { bucket_width: unknown; offset: unknown; ts: string }
          | { bucket_width: unknown; offset: unknown; ts: string }
          | { bucket_width: unknown; offset: unknown; ts: string }
          | {
              bucket_width: unknown;
              offset?: unknown;
              origin?: string;
              timezone: string;
              ts: string;
            }
          | { bucket_width: unknown; origin: string; ts: string }
          | { bucket_width: unknown; origin: string; ts: string }
          | { bucket_width: unknown; origin: string; ts: string }
          | { bucket_width: unknown; ts: string }
          | { bucket_width: unknown; ts: string }
          | { bucket_width: unknown; ts: string };
        Returns: string;
      };
      time_bucket_gapfill: {
        Args:
          | {
              bucket_width: number;
              finish?: number;
              start?: number;
              ts: number;
            }
          | {
              bucket_width: number;
              finish?: number;
              start?: number;
              ts: number;
            }
          | {
              bucket_width: number;
              finish?: number;
              start?: number;
              ts: number;
            }
          | {
              bucket_width: unknown;
              finish?: string;
              start?: string;
              timezone: string;
              ts: string;
            }
          | {
              bucket_width: unknown;
              finish?: string;
              start?: string;
              ts: string;
            }
          | {
              bucket_width: unknown;
              finish?: string;
              start?: string;
              ts: string;
            }
          | {
              bucket_width: unknown;
              finish?: string;
              start?: string;
              ts: string;
            };
        Returns: string;
      };
      timescaledb_post_restore: {
        Args: Record<PropertyKey, never>;
        Returns: boolean;
      };
      timescaledb_pre_restore: {
        Args: Record<PropertyKey, never>;
        Returns: boolean;
      };
    };
    Enums: {
      apiKeyUsageType: 'mcp-server';
      commandStatus: 'pending' | 'processing' | 'completed' | 'failed';
      deviceCapability:
        | 'on_off'
        | 'brightness'
        | 'color_temperature'
        | 'color_rgb'
        | 'temperature'
        | 'humidity'
        | 'air_quality'
        | 'co2'
        | 'pressure'
        | 'motion'
        | 'occupancy'
        | 'contact_sensor'
        | 'battery'
        | 'power_consumption'
        | 'voltage'
        | 'lock'
        | 'unlock'
        | 'audio_volume'
        | 'audio_playback'
        | 'video_stream'
        | 'fan_speed'
        | 'heating'
        | 'cooling'
        | 'target_temperature'
        | 'custom';
      deviceType:
        | 'light'
        | 'switch'
        | 'sensor'
        | 'thermostat'
        | 'lock'
        | 'camera'
        | 'speaker'
        | 'fan'
        | 'outlet'
        | 'cove_hub'
        | 'hub'
        | 'other';
      eventSeverity: 'info' | 'warning' | 'error' | 'critical';
      eventType:
        | 'hub_started'
        | 'hub_stopped'
        | 'device_discovered'
        | 'device_lost'
        | 'device_connected'
        | 'device_disconnected'
        | 'adapter_initialized'
        | 'adapter_error'
        | 'adapter_shutdown'
        | 'command_processed'
        | 'command_failed'
        | 'sync_success'
        | 'sync_error'
        | 'system_error'
        | 'config_updated'
        | 'state_changed'
        | 'lock_accessed'
        | 'lock_unlocked'
        | 'lock_locked'
        | 'motion_detected'
        | 'motion_cleared'
        | 'camera_stream_started'
        | 'camera_stream_stopped'
        | 'camera_motion_detected'
        | 'sensor_threshold_exceeded'
        | 'sensor_threshold_normal'
        | 'device_tampered'
        | 'battery_low'
        | 'battery_critical';
      localConnectionStatus: 'connected' | 'disconnected';
      protocolType:
        | 'esphome'
        | 'hue'
        | 'matter'
        | 'sonos'
        | 'zigbee'
        | 'zwave'
        | 'wifi'
        | 'bluetooth'
        | 'mqtt'
        | 'http';
      stripeSubscriptionStatus:
        | 'active'
        | 'canceled'
        | 'incomplete'
        | 'incomplete_expired'
        | 'past_due'
        | 'paused'
        | 'trialing'
        | 'unpaid';
      userRole: 'admin' | 'superAdmin' | 'user';
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
};

type DatabaseWithoutInternals = Omit<Database, '__InternalSupabase'>;

type DefaultSchema = DatabaseWithoutInternals[Extract<
  keyof Database,
  'public'
>];

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema['Tables'] & DefaultSchema['Views'])
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables'] &
        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Views'])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables'] &
      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Views'])[TableName] extends {
      Row: infer R;
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema['Tables'] &
        DefaultSchema['Views'])
    ? (DefaultSchema['Tables'] &
        DefaultSchema['Views'])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R;
      }
      ? R
      : never
    : never;

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema['Tables']
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables']
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables'][TableName] extends {
      Insert: infer I;
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema['Tables']
    ? DefaultSchema['Tables'][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I;
      }
      ? I
      : never
    : never;

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema['Tables']
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables']
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables'][TableName] extends {
      Update: infer U;
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema['Tables']
    ? DefaultSchema['Tables'][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U;
      }
      ? U
      : never
    : never;

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema['Enums']
    | { schema: keyof DatabaseWithoutInternals },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions['schema']]['Enums']
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions['schema']]['Enums'][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema['Enums']
    ? DefaultSchema['Enums'][DefaultSchemaEnumNameOrOptions]
    : never;

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema['CompositeTypes']
    | { schema: keyof DatabaseWithoutInternals },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions['schema']]['CompositeTypes']
    : never = never,
> = PublicCompositeTypeNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions['schema']]['CompositeTypes'][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema['CompositeTypes']
    ? DefaultSchema['CompositeTypes'][PublicCompositeTypeNameOrOptions]
    : never;

export const Constants = {
  public: {
    Enums: {
      apiKeyUsageType: ['mcp-server'],
      commandStatus: ['pending', 'processing', 'completed', 'failed'],
      deviceCapability: [
        'on_off',
        'brightness',
        'color_temperature',
        'color_rgb',
        'temperature',
        'humidity',
        'air_quality',
        'co2',
        'pressure',
        'motion',
        'occupancy',
        'contact_sensor',
        'battery',
        'power_consumption',
        'voltage',
        'lock',
        'unlock',
        'audio_volume',
        'audio_playback',
        'video_stream',
        'fan_speed',
        'heating',
        'cooling',
        'target_temperature',
        'custom',
      ],
      deviceType: [
        'light',
        'switch',
        'sensor',
        'thermostat',
        'lock',
        'camera',
        'speaker',
        'fan',
        'outlet',
        'cove_hub',
        'hub',
        'other',
      ],
      eventSeverity: ['info', 'warning', 'error', 'critical'],
      eventType: [
        'hub_started',
        'hub_stopped',
        'device_discovered',
        'device_lost',
        'device_connected',
        'device_disconnected',
        'adapter_initialized',
        'adapter_error',
        'adapter_shutdown',
        'command_processed',
        'command_failed',
        'sync_success',
        'sync_error',
        'system_error',
        'config_updated',
        'state_changed',
        'lock_accessed',
        'lock_unlocked',
        'lock_locked',
        'motion_detected',
        'motion_cleared',
        'camera_stream_started',
        'camera_stream_stopped',
        'camera_motion_detected',
        'sensor_threshold_exceeded',
        'sensor_threshold_normal',
        'device_tampered',
        'battery_low',
        'battery_critical',
      ],
      localConnectionStatus: ['connected', 'disconnected'],
      protocolType: [
        'esphome',
        'hue',
        'matter',
        'sonos',
        'zigbee',
        'zwave',
        'wifi',
        'bluetooth',
        'mqtt',
        'http',
      ],
      stripeSubscriptionStatus: [
        'active',
        'canceled',
        'incomplete',
        'incomplete_expired',
        'past_due',
        'paused',
        'trialing',
        'unpaid',
      ],
      userRole: ['admin', 'superAdmin', 'user'],
    },
  },
} as const;
