use esphome::connection::{create_connection, Connection, ESPHomeConnection};
use esphome::error::Result;
use esphome::proto::api::{
    ListEntitiesBinarySensorResponse, ListEntitiesClimateResponse, ListEntitiesCoverResponse,
    ListEntitiesDoneResponse, ListEntitiesFanResponse, ListEntitiesLightResponse,
    ListEntitiesNumberResponse, ListEntitiesRequest, ListEntitiesSelectResponse,
    ListEntitiesSensorResponse, ListEntitiesSwitchResponse, ListEntitiesTextSensorResponse,
};
use esphome::proto::helpers::MessageType;
use std::collections::HashMap;
use std::env;
use std::time::Duration;
use tokio::sync::mpsc;
use tokio::time::sleep;

mod utils;

// Define an enum for our entity types
enum EntityMessage {
    BinarySensor(ListEntitiesBinarySensorResponse),
    Sensor(ListEntitiesSensorResponse),
    TextSensor(ListEntitiesTextSensorResponse),
    Switch(ListEntitiesSwitchResponse),
    Light(ListEntitiesLightResponse),
    Cover(ListEntitiesCoverResponse),
    Fan(ListEntitiesFanResponse),
    Climate(ListEntitiesClimateResponse),
    Number(ListEntitiesNumberResponse),
    Select(ListEntitiesSelectResponse),
    Done,
}

#[tokio::test]
async fn test_auth_connection() -> Result<()> {
    println!("=== STARTING AUTHENTICATION CONNECTION TEST ===");

    // Initialize logging for the test
    utils::init_logging();
    println!("Logging initialized");

    // Get device information from utils or environment variables
    let (host, port, password) = utils::get_real_device_info().expect("Failed to get device info");

    println!("Got device info: {}:{}", host, port);
    println!(
        "Starting authentication test with device at {}:{}",
        host, port
    );
    println!("Password provided: {}", password.is_some());

    // Create and connect to the device
    println!("Connecting to device");

    // Add diagnostic information
    println!(
        "Connection details: Host={}, Port={}, Password={}",
        host,
        port,
        if let Some(pass) = password.as_ref() {
            format!("provided ({})", pass)
        } else {
            "none".to_string()
        }
    );

    let mut connection = create_connection(host.clone(), port, password.clone());

    // Try to connect
    println!("Added ESPHome device: {}:{}", host, port);
    println!("Added device with ID: {}:{}", host, port);
    println!("Connecting to device");

    // Try a simple ping to the host first
    println!("Testing network connectivity to {}:{}", host, port);
    match tokio::net::TcpStream::connect(format!("{}:{}", host, port)).await {
        Ok(_) => println!("TCP connection successful - device is reachable"),
        Err(e) => println!(
            "WARNING: TCP connection failed - device might not be reachable: {}",
            e
        ),
    }

    match connection.connect().await {
        Ok(_) => {
            println!("Connected to ESPHome device: {}:{}", host, port);
            println!("Connected to device");

            // Get and print device info
            match connection.device_info().await {
                Ok(device_info) => {
                    println!("Device info: {} ({})", device_info.name, device_info.model);
                    println!("Authentication successful!");

                    // Test a ping
                    match connection.ping().await {
                        Ok(_) => println!("Ping successful"),
                        Err(e) => println!("Ping failed: {}", e),
                    }

                    // List entities using custom implementation
                    println!("\n=== LISTING ENTITIES ===\n");

                    // Create collections for each entity type
                    let mut binary_sensors: Vec<ListEntitiesBinarySensorResponse> = Vec::new();
                    let mut sensors: Vec<ListEntitiesSensorResponse> = Vec::new();
                    let mut text_sensors: Vec<ListEntitiesTextSensorResponse> = Vec::new();
                    let mut switches: Vec<ListEntitiesSwitchResponse> = Vec::new();
                    let mut lights: Vec<ListEntitiesLightResponse> = Vec::new();
                    let mut covers: Vec<ListEntitiesCoverResponse> = Vec::new();
                    let mut fans: Vec<ListEntitiesFanResponse> = Vec::new();
                    let mut climate_devices: Vec<ListEntitiesClimateResponse> = Vec::new();
                    let mut numbers: Vec<ListEntitiesNumberResponse> = Vec::new();
                    let mut selects: Vec<ListEntitiesSelectResponse> = Vec::new();

                    // Create a channel for receiving entity messages
                    let (tx, mut rx) = mpsc::channel::<EntityMessage>(100);

                    // Register a handler for binary sensors
                    let binary_tx = tx.clone();
                    let binary_id = connection.register_handler(
                        MessageType::ListEntitiesBinarySensorResponse,
                        move |msg: ListEntitiesBinarySensorResponse| {
                            let _ = binary_tx.try_send(EntityMessage::BinarySensor(msg));
                            Ok(())
                        },
                    );

                    // Register a handler for sensors
                    let sensor_tx = tx.clone();
                    let sensor_id = connection.register_handler(
                        MessageType::ListEntitiesSensorResponse,
                        move |msg: ListEntitiesSensorResponse| {
                            let _ = sensor_tx.try_send(EntityMessage::Sensor(msg));
                            Ok(())
                        },
                    );

                    // Register a handler for text sensors
                    let text_tx = tx.clone();
                    let text_id = connection.register_handler(
                        MessageType::ListEntitiesTextSensorResponse,
                        move |msg: ListEntitiesTextSensorResponse| {
                            let _ = text_tx.try_send(EntityMessage::TextSensor(msg));
                            Ok(())
                        },
                    );

                    // Register a handler for switches
                    let switch_tx = tx.clone();
                    let switch_id = connection.register_handler(
                        MessageType::ListEntitiesSwitchResponse,
                        move |msg: ListEntitiesSwitchResponse| {
                            let _ = switch_tx.try_send(EntityMessage::Switch(msg));
                            Ok(())
                        },
                    );

                    // Register a handler for lights
                    let light_tx = tx.clone();
                    let light_id = connection.register_handler(
                        MessageType::ListEntitiesLightResponse,
                        move |msg: ListEntitiesLightResponse| {
                            let _ = light_tx.try_send(EntityMessage::Light(msg));
                            Ok(())
                        },
                    );

                    // Register a handler for covers
                    let cover_tx = tx.clone();
                    let cover_id = connection.register_handler(
                        MessageType::ListEntitiesCoverResponse,
                        move |msg: ListEntitiesCoverResponse| {
                            let _ = cover_tx.try_send(EntityMessage::Cover(msg));
                            Ok(())
                        },
                    );

                    // Register a handler for fans
                    let fan_tx = tx.clone();
                    let fan_id = connection.register_handler(
                        MessageType::ListEntitiesFanResponse,
                        move |msg: ListEntitiesFanResponse| {
                            let _ = fan_tx.try_send(EntityMessage::Fan(msg));
                            Ok(())
                        },
                    );

                    // Register a handler for climate devices
                    let climate_tx = tx.clone();
                    let climate_id = connection.register_handler(
                        MessageType::ListEntitiesClimateResponse,
                        move |msg: ListEntitiesClimateResponse| {
                            let _ = climate_tx.try_send(EntityMessage::Climate(msg));
                            Ok(())
                        },
                    );

                    // Register a handler for numbers
                    let number_tx = tx.clone();
                    let number_id = connection.register_handler(
                        MessageType::ListEntitiesNumberResponse,
                        move |msg: ListEntitiesNumberResponse| {
                            let _ = number_tx.try_send(EntityMessage::Number(msg));
                            Ok(())
                        },
                    );

                    // Register a handler for selects
                    let select_tx = tx.clone();
                    let select_id = connection.register_handler(
                        MessageType::ListEntitiesSelectResponse,
                        move |msg: ListEntitiesSelectResponse| {
                            let _ = select_tx.try_send(EntityMessage::Select(msg));
                            Ok(())
                        },
                    );

                    // Register a handler for done signal
                    let done_tx = tx.clone();
                    let done_id = connection.register_handler(
                        MessageType::ListEntitiesDoneResponse,
                        move |_: ListEntitiesDoneResponse| {
                            let _ = done_tx.try_send(EntityMessage::Done);
                            Ok(())
                        },
                    );

                    // Send the list entities request
                    let request = ListEntitiesRequest {};
                    match connection.send_message(&request).await {
                        Ok(_) => println!("Sent list entities request"),
                        Err(e) => println!("Failed to send list entities request: {}", e),
                    }

                    // Process incoming messages with a timeout
                    let mut done = false;
                    let timeout_duration = Duration::from_secs(10);
                    let start_time = std::time::Instant::now();

                    while !done && start_time.elapsed() < timeout_duration {
                        match tokio::time::timeout(Duration::from_millis(100), rx.recv()).await {
                            Ok(Some(entity_msg)) => match entity_msg {
                                EntityMessage::BinarySensor(entity) => binary_sensors.push(entity),
                                EntityMessage::Sensor(entity) => sensors.push(entity),
                                EntityMessage::TextSensor(entity) => text_sensors.push(entity),
                                EntityMessage::Switch(entity) => switches.push(entity),
                                EntityMessage::Light(entity) => lights.push(entity),
                                EntityMessage::Cover(entity) => covers.push(entity),
                                EntityMessage::Fan(entity) => fans.push(entity),
                                EntityMessage::Climate(entity) => climate_devices.push(entity),
                                EntityMessage::Number(entity) => numbers.push(entity),
                                EntityMessage::Select(entity) => selects.push(entity),
                                EntityMessage::Done => {
                                    done = true;
                                    println!("Received list entities done signal");
                                }
                            },
                            Ok(None) => {
                                println!("Channel closed unexpectedly");
                                break;
                            }
                            Err(_) => {
                                // Timeout - continue until we've waited long enough
                            }
                        }
                    }

                    // Unregister handlers
                    connection.unregister_handler(
                        MessageType::ListEntitiesBinarySensorResponse,
                        binary_id,
                    );
                    connection
                        .unregister_handler(MessageType::ListEntitiesSensorResponse, sensor_id);
                    connection
                        .unregister_handler(MessageType::ListEntitiesTextSensorResponse, text_id);
                    connection
                        .unregister_handler(MessageType::ListEntitiesSwitchResponse, switch_id);
                    connection.unregister_handler(MessageType::ListEntitiesLightResponse, light_id);
                    connection.unregister_handler(MessageType::ListEntitiesCoverResponse, cover_id);
                    connection.unregister_handler(MessageType::ListEntitiesFanResponse, fan_id);
                    connection
                        .unregister_handler(MessageType::ListEntitiesClimateResponse, climate_id);
                    connection
                        .unregister_handler(MessageType::ListEntitiesNumberResponse, number_id);
                    connection
                        .unregister_handler(MessageType::ListEntitiesSelectResponse, select_id);
                    connection.unregister_handler(MessageType::ListEntitiesDoneResponse, done_id);

                    // Print results

                    // Binary sensors
                    println!("Binary Sensors ({})", binary_sensors.len());
                    for (i, entity) in binary_sensors.iter().enumerate() {
                        println!(
                            "  {}. {} (key: {}, id: {})",
                            i + 1,
                            entity.name,
                            entity.key,
                            entity.object_id
                        );
                    }
                    println!();

                    // Sensors
                    println!("Sensors ({})", sensors.len());
                    for (i, entity) in sensors.iter().enumerate() {
                        println!(
                            "  {}. {} (key: {}, id: {}, unit: {})",
                            i + 1,
                            entity.name,
                            entity.key,
                            entity.object_id,
                            entity.unit_of_measurement
                        );
                    }
                    println!();

                    // Text sensors
                    println!("Text Sensors ({})", text_sensors.len());
                    for (i, entity) in text_sensors.iter().enumerate() {
                        println!(
                            "  {}. {} (key: {}, id: {})",
                            i + 1,
                            entity.name,
                            entity.key,
                            entity.object_id
                        );
                    }
                    println!();

                    // Switches
                    println!("Switches ({})", switches.len());
                    for (i, entity) in switches.iter().enumerate() {
                        println!(
                            "  {}. {} (key: {}, id: {})",
                            i + 1,
                            entity.name,
                            entity.key,
                            entity.object_id
                        );
                    }
                    println!();

                    // Lights
                    println!("Lights ({})", lights.len());
                    for (i, entity) in lights.iter().enumerate() {
                        println!(
                            "  {}. {} (key: {}, id: {})",
                            i + 1,
                            entity.name,
                            entity.key,
                            entity.object_id
                        );
                    }
                    println!();

                    // Covers
                    println!("Covers ({})", covers.len());
                    for (i, entity) in covers.iter().enumerate() {
                        println!(
                            "  {}. {} (key: {}, id: {})",
                            i + 1,
                            entity.name,
                            entity.key,
                            entity.object_id
                        );
                    }
                    println!();

                    // Fans
                    println!("Fans ({})", fans.len());
                    for (i, entity) in fans.iter().enumerate() {
                        println!(
                            "  {}. {} (key: {}, id: {})",
                            i + 1,
                            entity.name,
                            entity.key,
                            entity.object_id
                        );
                    }
                    println!();

                    // Climate devices
                    println!("Climate Devices ({})", climate_devices.len());
                    for (i, entity) in climate_devices.iter().enumerate() {
                        println!(
                            "  {}. {} (key: {}, id: {})",
                            i + 1,
                            entity.name,
                            entity.key,
                            entity.object_id
                        );
                    }
                    println!();

                    // Number entities
                    println!("Number Entities ({})", numbers.len());
                    for (i, entity) in numbers.iter().enumerate() {
                        println!(
                            "  {}. {} (key: {}, id: {}, min: {}, max: {}, step: {})",
                            i + 1,
                            entity.name,
                            entity.key,
                            entity.object_id,
                            entity.min_value,
                            entity.max_value,
                            entity.step
                        );
                    }
                    println!();

                    // Select entities
                    println!("Select Entities ({})", selects.len());
                    for (i, entity) in selects.iter().enumerate() {
                        println!(
                            "  {}. {} (key: {}, id: {}, options: {:?})",
                            i + 1,
                            entity.name,
                            entity.key,
                            entity.object_id,
                            entity.options
                        );
                    }
                    println!();

                    println!("=== ENTITY LISTING COMPLETE ===\n");

                    // Wait a moment
                    println!("Waiting for 5 seconds...");
                    sleep(Duration::from_secs(5)).await;
                }
                Err(e) => {
                    println!("Failed to get device info: {}", e);
                }
            }

            // Disconnect
            println!("Disconnecting from device");
            match connection.disconnect().await {
                Ok(_) => {
                    println!("Disconnected from ESPHome device: {}:{}", host, port);
                    println!("Disconnected from device");
                }
                Err(e) => {
                    println!("Failed to disconnect: {}", e);
                }
            }
        }
        Err(e) => {
            println!("Failed to connect to device: {}", e);

            // Print more detailed error diagnosis
            println!("\n=== ERROR DIAGNOSIS ===");

            // Check if this might be an authentication error
            if e.to_string().contains("auth") || e.to_string().contains("password") {
                println!("This appears to be an AUTHENTICATION ERROR.");
                println!("Your device requires a password, but either:");
                println!("1. No password was provided");
                println!("2. The wrong password was provided");

                if password.is_some() {
                    println!(
                        "\nYou provided password: \"{}\"",
                        password.as_ref().unwrap()
                    );
                    println!("Try a different password or check if your device's password has been reset.");
                } else {
                    println!("\nYou did not provide a password.");
                    println!("Set ESPHOME_TEST_PASSWORD environment variable with your device's password.");
                }
            } else if e.to_string().contains("timeout") || e.to_string().contains("connect") {
                println!("This appears to be a CONNECTION ERROR.");
                println!("The device at {}:{} could not be reached.", host, port);
                println!("Possible reasons:");
                println!("1. The device is powered off");
                println!("2. The IP address is incorrect (you're using {})", host);
                println!("3. There's a network issue between your computer and the device");
                println!("4. The device is not running ESPHome or its API is disabled");

                println!(
                    "\nTry checking if the device is powered on and accessible on your network."
                );
                println!("You can also try setting ESPHOME_TEST_HOST to a different IP address if needed.");
            } else {
                println!("Unexpected error occurred. Please check the full error message above.");
            }

            println!("=== END DIAGNOSIS ===\n");

            if password.is_none() {
                println!("Note: No password was provided. If the device requires authentication, set ESPHOME_TEST_PASSWORD environment variable.");
            } else {
                println!("Current password: \"{}\"", password.as_ref().unwrap());
            }
        }
    }

    Ok(())
}
